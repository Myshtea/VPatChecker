model TranslationApp {
	
	contexts {
		INTERNET_CONNECTIVITY
	}
	
	static contexts {
		minSdk = "26",
		maxSdk = "",
		targetSdk = "32"
	}
	
	situations {
		INTERNET_DISCONNECTED : INTERNET_CONNECTIVITY,
		INTERNET_SLOW : INTERNET_CONNECTIVITY
	}
	
	statemachine "ABSTRACT_SM" {
		
		state START {
			transition on APP_STARTED -> SEND_MESSAGE_ACTIVITY
		}
		
		super state SEND_MESSAGE_ACTIVITY abstracts SEND_MESSAGE_ACTIVITY_SM {
			transition on SUCCESS -> HANDLE_SUCCESS
			transition on TERMINATE_BUTTON_CLICKED -> EXIT
		}
		
		super state HANDLE_SUCCESS abstracts HANDLE_SUCCESS_SM {
			transition on END_HANDLE -> EXIT
		}
		
 		state EXIT
	}
	
	statemachine HANDLE_SUCCESS_SM {
		state HANDLE_SUCCESS {
			transition on MESSAGE_PRINTED -> HANDLE
			transition on TIME_ELAPSED -> HANDLE_TIMEOUT
		}
		
		state HANDLE_TIMEOUT {
			transition on END_TIMEOUT -> HANDLE
		}
		
		state HANDLE
	}

	statemachine SEND_MESSAGE_ACTIVITY_SM exported {
	
		state SEND_MESSAGE awareof INTERNET_CONNECTIVITY {
			transition on SEND_MESSAGE_CLICKED -> SENDER
			dataflows {
				source internet			
			}
		}
		
		state SENDER {
			transition on GOOD_MESSAGE -> SHOW_ANSWER
			transition on WRONG -> DISPLAY_WARNING
			dataflows {
				input source enter_value				
			}
		}
		
		state SHOW_ANSWER {
		}
		
		state DISPLAY_WARNING {
			transition on BACK_BUTTON_PRESSED -> SEND_MESSAGE
			dataflows {
				sink "log.t" ( source SEND_MESSAGE_ACTIVITY_SM.SEND_MESSAGE.internet, source SENDER.enter_value )
			}
		}
		
	}
	
	adaptation for INTERNET_SLOW at SEND_MESSAGE {
		
		state SEND_MESSAGE {
			transition on NONE -> HANDLE_SLOW_INTERNET
		}
		
		state HANDLE_SLOW_INTERNET{
			transition on NONE -> external SEND_MESSAGE_ACTIVITY_SM.SENDER
			dataflows { 
				sink "log.d" ( source SEND_MESSAGE_ACTIVITY_SM.SEND_MESSAGE.internet )
			}	
		}
		
	}

}
	