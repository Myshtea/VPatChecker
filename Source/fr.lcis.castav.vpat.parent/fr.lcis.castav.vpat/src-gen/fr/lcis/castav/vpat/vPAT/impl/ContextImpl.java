/**
 * generated by Xtext 2.29.0
 */
package fr.lcis.castav.vpat.vPAT.impl;

import fr.lcis.castav.vpat.vPAT.Context;
import fr.lcis.castav.vpat.vPAT.VPATPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Context</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.lcis.castav.vpat.vPAT.impl.ContextImpl#isPermission <em>Permission</em>}</li>
 *   <li>{@link fr.lcis.castav.vpat.vPAT.impl.ContextImpl#getValue <em>Value</em>}</li>
 *   <li>{@link fr.lcis.castav.vpat.vPAT.impl.ContextImpl#isNetwork <em>Network</em>}</li>
 *   <li>{@link fr.lcis.castav.vpat.vPAT.impl.ContextImpl#isVersion <em>Version</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ContextImpl extends MinimalEObjectImpl.Container implements Context
{
  /**
   * The default value of the '{@link #isPermission() <em>Permission</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPermission()
   * @generated
   * @ordered
   */
  protected static final boolean PERMISSION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPermission() <em>Permission</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPermission()
   * @generated
   * @ordered
   */
  protected boolean permission = PERMISSION_EDEFAULT;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected EObject value;

  /**
   * The default value of the '{@link #isNetwork() <em>Network</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNetwork()
   * @generated
   * @ordered
   */
  protected static final boolean NETWORK_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNetwork() <em>Network</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNetwork()
   * @generated
   * @ordered
   */
  protected boolean network = NETWORK_EDEFAULT;

  /**
   * The default value of the '{@link #isVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVersion()
   * @generated
   * @ordered
   */
  protected static final boolean VERSION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVersion()
   * @generated
   * @ordered
   */
  protected boolean version = VERSION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return VPATPackage.Literals.CONTEXT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isPermission()
  {
    return permission;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPermission(boolean newPermission)
  {
    boolean oldPermission = permission;
    permission = newPermission;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VPATPackage.CONTEXT__PERMISSION, oldPermission, permission));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValue(EObject newValue, NotificationChain msgs)
  {
    EObject oldValue = value;
    value = newValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VPATPackage.CONTEXT__VALUE, oldValue, newValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(EObject newValue)
  {
    if (newValue != value)
    {
      NotificationChain msgs = null;
      if (value != null)
        msgs = ((InternalEObject)value).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VPATPackage.CONTEXT__VALUE, null, msgs);
      if (newValue != null)
        msgs = ((InternalEObject)newValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VPATPackage.CONTEXT__VALUE, null, msgs);
      msgs = basicSetValue(newValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VPATPackage.CONTEXT__VALUE, newValue, newValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNetwork()
  {
    return network;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNetwork(boolean newNetwork)
  {
    boolean oldNetwork = network;
    network = newNetwork;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VPATPackage.CONTEXT__NETWORK, oldNetwork, network));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVersion(boolean newVersion)
  {
    boolean oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VPATPackage.CONTEXT__VERSION, oldVersion, version));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case VPATPackage.CONTEXT__VALUE:
        return basicSetValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case VPATPackage.CONTEXT__PERMISSION:
        return isPermission();
      case VPATPackage.CONTEXT__VALUE:
        return getValue();
      case VPATPackage.CONTEXT__NETWORK:
        return isNetwork();
      case VPATPackage.CONTEXT__VERSION:
        return isVersion();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case VPATPackage.CONTEXT__PERMISSION:
        setPermission((Boolean)newValue);
        return;
      case VPATPackage.CONTEXT__VALUE:
        setValue((EObject)newValue);
        return;
      case VPATPackage.CONTEXT__NETWORK:
        setNetwork((Boolean)newValue);
        return;
      case VPATPackage.CONTEXT__VERSION:
        setVersion((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case VPATPackage.CONTEXT__PERMISSION:
        setPermission(PERMISSION_EDEFAULT);
        return;
      case VPATPackage.CONTEXT__VALUE:
        setValue((EObject)null);
        return;
      case VPATPackage.CONTEXT__NETWORK:
        setNetwork(NETWORK_EDEFAULT);
        return;
      case VPATPackage.CONTEXT__VERSION:
        setVersion(VERSION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case VPATPackage.CONTEXT__PERMISSION:
        return permission != PERMISSION_EDEFAULT;
      case VPATPackage.CONTEXT__VALUE:
        return value != null;
      case VPATPackage.CONTEXT__NETWORK:
        return network != NETWORK_EDEFAULT;
      case VPATPackage.CONTEXT__VERSION:
        return version != VERSION_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (Permission: ");
    result.append(permission);
    result.append(", Network: ");
    result.append(network);
    result.append(", Version: ");
    result.append(version);
    result.append(')');
    return result.toString();
  }

} //ContextImpl
