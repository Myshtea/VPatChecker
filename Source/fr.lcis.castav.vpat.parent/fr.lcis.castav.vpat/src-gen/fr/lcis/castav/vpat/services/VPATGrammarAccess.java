/*
 * generated by Xtext 2.29.0
 */
package fr.lcis.castav.vpat.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VPATGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class VulnerabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.Vulnerability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVulnerabilityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVulnerabilityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDescriptionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_4_1_0 = (RuleCall)cDescriptionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cContextKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cContextAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cContextContextParserRuleCall_5_2_0 = (RuleCall)cContextAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cContextAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cContextContextParserRuleCall_5_3_1_0 = (RuleCall)cContextAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFunctionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_6_2 = (UnorderedGroup)cGroup_6.eContents().get(2);
		private final Group cGroup_6_2_0 = (Group)cUnorderedGroup_6_2.eContents().get(0);
		private final Keyword cMainKeyword_6_2_0_0 = (Keyword)cGroup_6_2_0.eContents().get(0);
		private final Assignment cMainFunctionAssignment_6_2_0_1 = (Assignment)cGroup_6_2_0.eContents().get(1);
		private final RuleCall cMainFunctionSinkParserRuleCall_6_2_0_1_0 = (RuleCall)cMainFunctionAssignment_6_2_0_1.eContents().get(0);
		private final Group cGroup_6_2_1 = (Group)cUnorderedGroup_6_2.eContents().get(1);
		private final Keyword cCommaKeyword_6_2_1_0 = (Keyword)cGroup_6_2_1.eContents().get(0);
		private final Assignment cFunctionAssignment_6_2_1_1 = (Assignment)cGroup_6_2_1.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_6_2_1_1_0 = (RuleCall)cFunctionAssignment_6_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Vulnerability returns Vulnerability:
		//    {Vulnerability}
		//    'Vulnerability'
		//    name=EString
		//    '{'
		//        ('description' description=EString)?
		//        ('context' '{' context+=Context ( "," context+=Context)*  '}')?
		//        ('function' '{' ('main' mainFunction=Sink & (( "," function+=Function)*))  '}')?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Vulnerability}
		//'Vulnerability'
		//name=EString
		//'{'
		//    ('description' description=EString)?
		//    ('context' '{' context+=Context ( "," context+=Context)*  '}')?
		//    ('function' '{' ('main' mainFunction=Sink & (( "," function+=Function)*))  '}')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Vulnerability}
		public Action getVulnerabilityAction_0() { return cVulnerabilityAction_0; }
		
		//'Vulnerability'
		public Keyword getVulnerabilityKeyword_1() { return cVulnerabilityKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('description' description=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'description'
		public Keyword getDescriptionKeyword_4_0() { return cDescriptionKeyword_4_0; }
		
		//description=EString
		public Assignment getDescriptionAssignment_4_1() { return cDescriptionAssignment_4_1; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_4_1_0() { return cDescriptionEStringParserRuleCall_4_1_0; }
		
		//('context' '{' context+=Context ( "," context+=Context)*  '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'context'
		public Keyword getContextKeyword_5_0() { return cContextKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//context+=Context
		public Assignment getContextAssignment_5_2() { return cContextAssignment_5_2; }
		
		//Context
		public RuleCall getContextContextParserRuleCall_5_2_0() { return cContextContextParserRuleCall_5_2_0; }
		
		//( "," context+=Context)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//context+=Context
		public Assignment getContextAssignment_5_3_1() { return cContextAssignment_5_3_1; }
		
		//Context
		public RuleCall getContextContextParserRuleCall_5_3_1_0() { return cContextContextParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('function' '{' ('main' mainFunction=Sink & (( "," function+=Function)*))  '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'function'
		public Keyword getFunctionKeyword_6_0() { return cFunctionKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//('main' mainFunction=Sink & (( "," function+=Function)*))
		public UnorderedGroup getUnorderedGroup_6_2() { return cUnorderedGroup_6_2; }
		
		//'main' mainFunction=Sink
		public Group getGroup_6_2_0() { return cGroup_6_2_0; }
		
		//'main'
		public Keyword getMainKeyword_6_2_0_0() { return cMainKeyword_6_2_0_0; }
		
		//mainFunction=Sink
		public Assignment getMainFunctionAssignment_6_2_0_1() { return cMainFunctionAssignment_6_2_0_1; }
		
		//Sink
		public RuleCall getMainFunctionSinkParserRuleCall_6_2_0_1_0() { return cMainFunctionSinkParserRuleCall_6_2_0_1_0; }
		
		//(( "," function+=Function)*)
		public Group getGroup_6_2_1() { return cGroup_6_2_1; }
		
		//","
		public Keyword getCommaKeyword_6_2_1_0() { return cCommaKeyword_6_2_1_0; }
		
		//function+=Function
		public Assignment getFunctionAssignment_6_2_1_1() { return cFunctionAssignment_6_2_1_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_6_2_1_1_0() { return cFunctionFunctionParserRuleCall_6_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.Context");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPermissionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cPermissionAndroidPermissionKeyword_0_0_0 = (Keyword)cPermissionAssignment_0_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValuePermissionParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNetworkAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNetworkNetworkKeyword_1_0_0 = (Keyword)cNetworkAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueNetworkParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cVersionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cVersionApiversionKeyword_2_0_0 = (Keyword)cVersionAssignment_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueVersionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Context returns Context:
		//    Permission?='android.permission.' value=Permission | Network?='network' value=Network | Version?="apiversion" value=Version
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Permission?='android.permission.' value=Permission | Network?='network' value=Network | Version?="apiversion" value=Version
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Permission?='android.permission.' value=Permission
		public Group getGroup_0() { return cGroup_0; }
		
		//Permission?='android.permission.'
		public Assignment getPermissionAssignment_0_0() { return cPermissionAssignment_0_0; }
		
		//'android.permission.'
		public Keyword getPermissionAndroidPermissionKeyword_0_0_0() { return cPermissionAndroidPermissionKeyword_0_0_0; }
		
		//value=Permission
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//Permission
		public RuleCall getValuePermissionParserRuleCall_0_1_0() { return cValuePermissionParserRuleCall_0_1_0; }
		
		//Network?='network' value=Network
		public Group getGroup_1() { return cGroup_1; }
		
		//Network?='network'
		public Assignment getNetworkAssignment_1_0() { return cNetworkAssignment_1_0; }
		
		//'network'
		public Keyword getNetworkNetworkKeyword_1_0_0() { return cNetworkNetworkKeyword_1_0_0; }
		
		//value=Network
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//Network
		public RuleCall getValueNetworkParserRuleCall_1_1_0() { return cValueNetworkParserRuleCall_1_1_0; }
		
		//Version?="apiversion" value=Version
		public Group getGroup_2() { return cGroup_2; }
		
		//Version?="apiversion"
		public Assignment getVersionAssignment_2_0() { return cVersionAssignment_2_0; }
		
		//"apiversion"
		public Keyword getVersionApiversionKeyword_2_0_0() { return cVersionApiversionKeyword_2_0_0; }
		
		//value=Version
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Version
		public RuleCall getValueVersionParserRuleCall_2_1_0() { return cValueVersionParserRuleCall_2_1_0; }
	}
	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.Version");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Version returns Version:
		//    name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class PermissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.Permission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPermissionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePermissionIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Permission returns Permissions:
		//    {Permission} name=permissionID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Permission} name=permissionID
		public Group getGroup() { return cGroup; }
		
		//{Permission}
		public Action getPermissionAction_0() { return cPermissionAction_0; }
		
		//name=permissionID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//permissionID
		public RuleCall getNamePermissionIDParserRuleCall_1_0() { return cNamePermissionIDParserRuleCall_1_0; }
	}
	public class PermissionIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.permissionID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameACCESS_MEDIA_LOCATIONKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameACCESS_NETWORK_STATEKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cNameACCESS_WIFI_STATEKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNameINTERNETKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		
		////TODO : ADD every permission in android
		//permissionID returns PermissionID:
		//    name='ACCESS_MEDIA_LOCATION' |
		//    name='ACCESS_NETWORK_STATE'  |
		//    name='ACCESS_WIFI_STATE'     |
		//    name='INTERNET'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name='ACCESS_MEDIA_LOCATION' |
		//name='ACCESS_NETWORK_STATE'  |
		//name='ACCESS_WIFI_STATE'     |
		//name='INTERNET'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name='ACCESS_MEDIA_LOCATION'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'ACCESS_MEDIA_LOCATION'
		public Keyword getNameACCESS_MEDIA_LOCATIONKeyword_0_0() { return cNameACCESS_MEDIA_LOCATIONKeyword_0_0; }
		
		//name='ACCESS_NETWORK_STATE'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'ACCESS_NETWORK_STATE'
		public Keyword getNameACCESS_NETWORK_STATEKeyword_1_0() { return cNameACCESS_NETWORK_STATEKeyword_1_0; }
		
		//name='ACCESS_WIFI_STATE'
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//'ACCESS_WIFI_STATE'
		public Keyword getNameACCESS_WIFI_STATEKeyword_2_0() { return cNameACCESS_WIFI_STATEKeyword_2_0; }
		
		//name='INTERNET'
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//'INTERNET'
		public Keyword getNameINTERNETKeyword_3_0() { return cNameINTERNETKeyword_3_0; }
	}
	public class NetworkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.Network");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNetworkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////TODO : ADD network configurations (Trusted CA...)
		//Network returns Network:
		//    {Network} 'default'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Network} 'default'
		public Group getGroup() { return cGroup; }
		
		//{Network}
		public Action getNetworkAction_0() { return cNetworkAction_0; }
		
		//'default'
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInflowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Function returns Function:
		//    Sink | Inflow
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Sink | Inflow
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sink
		public RuleCall getSinkParserRuleCall_0() { return cSinkParserRuleCall_0; }
		
		//Inflow
		public RuleCall getInflowParserRuleCall_1() { return cInflowParserRuleCall_1; }
	}
	public class SinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.Sink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cParameterKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cParameterAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cParameterParameterParserRuleCall_3_2_0 = (RuleCall)cParameterAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cParameterAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_3_3_1_0 = (RuleCall)cParameterAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sink returns Sink:
		//    'Sink' name=EString
		//    '{'
		//        ('parameter' '{'
		//            parameter+=Parameter ( "," parameter+=Parameter)* '}'
		//        )?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sink' name=EString
		//'{'
		//    ('parameter' '{'
		//        parameter+=Parameter ( "," parameter+=Parameter)* '}'
		//    )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Sink'
		public Keyword getSinkKeyword_0() { return cSinkKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('parameter' '{'
		//    parameter+=Parameter ( "," parameter+=Parameter)* '}'
		//)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'parameter'
		public Keyword getParameterKeyword_3_0() { return cParameterKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_3_2() { return cParameterAssignment_3_2; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_2_0() { return cParameterParameterParserRuleCall_3_2_0; }
		
		//( "," parameter+=Parameter)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_3_3_1() { return cParameterAssignment_3_3_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_3_1_0() { return cParameterParameterParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOriginAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cOriginFunctionCrossReference_0_0 = (CrossReference)cOriginAssignment_0.eContents().get(0);
		private final RuleCall cOriginFunctionFQNParserRuleCall_0_0_1 = (RuleCall)cOriginFunctionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStaticAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cStaticStaticKeyword_1_0_0 = (Keyword)cStaticAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cAnyValueAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cAnyValueAsteriskKeyword_1_1_0_0 = (Keyword)cAnyValueAssignment_1_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		
		//Parameter returns Parameter:
		//    origin=[Function|FQN] |
		//    (static?='static' (anyValue?='*' | value=EString))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//origin=[Function|FQN] |
		//(static?='static' (anyValue?='*' | value=EString))
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//origin=[Function|FQN]
		public Assignment getOriginAssignment_0() { return cOriginAssignment_0; }
		
		//[Function|FQN]
		public CrossReference getOriginFunctionCrossReference_0_0() { return cOriginFunctionCrossReference_0_0; }
		
		//FQN
		public RuleCall getOriginFunctionFQNParserRuleCall_0_0_1() { return cOriginFunctionFQNParserRuleCall_0_0_1; }
		
		//(static?='static' (anyValue?='*' | value=EString))
		public Group getGroup_1() { return cGroup_1; }
		
		//static?='static'
		public Assignment getStaticAssignment_1_0() { return cStaticAssignment_1_0; }
		
		//'static'
		public Keyword getStaticStaticKeyword_1_0_0() { return cStaticStaticKeyword_1_0_0; }
		
		//(anyValue?='*' | value=EString)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//anyValue?='*'
		public Assignment getAnyValueAssignment_1_1_0() { return cAnyValueAssignment_1_1_0; }
		
		//'*'
		public Keyword getAnyValueAsteriskKeyword_1_1_0_0() { return cAnyValueAsteriskKeyword_1_1_0_0; }
		
		//value=EString
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_1_1_1_0() { return cValueEStringParserRuleCall_1_1_1_0; }
	}
	public class InflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.Inflow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Inflow returns Inflow:
		//    Source |
		//    Input
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Source |
		//Input
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Source
		public RuleCall getSourceParserRuleCall_0() { return cSourceParserRuleCall_0; }
		
		//Input
		public RuleCall getInputParserRuleCall_1() { return cInputParserRuleCall_1; }
	}
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSourceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cAnyPrivateAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cAnyPrivateAsteriskKeyword_3_0_0 = (Keyword)cAnyPrivateAssignment_3_0.eContents().get(0);
		private final Assignment cMethodAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cMethodEStringParserRuleCall_3_1_0 = (RuleCall)cMethodAssignment_3_1.eContents().get(0);
		
		//Source returns Source:
		//    {Source} 'Source' name=EString (anyPrivate?='*' | method=EString)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Source} 'Source' name=EString (anyPrivate?='*' | method=EString)
		public Group getGroup() { return cGroup; }
		
		//{Source}
		public Action getSourceAction_0() { return cSourceAction_0; }
		
		//'Source'
		public Keyword getSourceKeyword_1() { return cSourceKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//(anyPrivate?='*' | method=EString)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//anyPrivate?='*'
		public Assignment getAnyPrivateAssignment_3_0() { return cAnyPrivateAssignment_3_0; }
		
		//'*'
		public Keyword getAnyPrivateAsteriskKeyword_3_0_0() { return cAnyPrivateAsteriskKeyword_3_0_0; }
		
		//method=EString
		public Assignment getMethodAssignment_3_1() { return cMethodAssignment_3_1; }
		
		//EString
		public RuleCall getMethodEStringParserRuleCall_3_1_0() { return cMethodEStringParserRuleCall_3_1_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodEStringParserRuleCall_3_0 = (RuleCall)cMethodAssignment_3.eContents().get(0);
		
		//Input returns Input:
		//    {Input} 'Input' name=EString method=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Input} 'Input' name=EString method=EString
		public Group getGroup() { return cGroup; }
		
		//{Input}
		public Action getInputAction_0() { return cInputAction_0; }
		
		//'Input'
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//method=EString
		public Assignment getMethodAssignment_3() { return cMethodAssignment_3; }
		
		//EString
		public RuleCall getMethodEStringParserRuleCall_3_0() { return cMethodEStringParserRuleCall_3_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.vpat.VPAT.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEStringParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEStringParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN hidden(): EString('.' EString)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EString('.' EString)*
		public Group getGroup() { return cGroup; }
		
		//EString
		public RuleCall getEStringParserRuleCall_0() { return cEStringParserRuleCall_0; }
		
		//('.' EString)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//EString
		public RuleCall getEStringParserRuleCall_1_1() { return cEStringParserRuleCall_1_1; }
	}
	
	
	private final VulnerabilityElements pVulnerability;
	private final EStringElements pEString;
	private final ContextElements pContext;
	private final VersionElements pVersion;
	private final PermissionElements pPermission;
	private final PermissionIDElements pPermissionID;
	private final NetworkElements pNetwork;
	private final FunctionElements pFunction;
	private final SinkElements pSink;
	private final ParameterElements pParameter;
	private final InflowElements pInflow;
	private final SourceElements pSource;
	private final InputElements pInput;
	private final FQNElements pFQN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VPATGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVulnerability = new VulnerabilityElements();
		this.pEString = new EStringElements();
		this.pContext = new ContextElements();
		this.pVersion = new VersionElements();
		this.pPermission = new PermissionElements();
		this.pPermissionID = new PermissionIDElements();
		this.pNetwork = new NetworkElements();
		this.pFunction = new FunctionElements();
		this.pSink = new SinkElements();
		this.pParameter = new ParameterElements();
		this.pInflow = new InflowElements();
		this.pSource = new SourceElements();
		this.pInput = new InputElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.lcis.castav.vpat.VPAT".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Vulnerability returns Vulnerability:
	//    {Vulnerability}
	//    'Vulnerability'
	//    name=EString
	//    '{'
	//        ('description' description=EString)?
	//        ('context' '{' context+=Context ( "," context+=Context)*  '}')?
	//        ('function' '{' ('main' mainFunction=Sink & (( "," function+=Function)*))  '}')?
	//    '}';
	public VulnerabilityElements getVulnerabilityAccess() {
		return pVulnerability;
	}
	
	public ParserRule getVulnerabilityRule() {
		return getVulnerabilityAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Context returns Context:
	//    Permission?='android.permission.' value=Permission | Network?='network' value=Network | Version?="apiversion" value=Version
	//;
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//Version returns Version:
	//    name=STRING
	//;
	public VersionElements getVersionAccess() {
		return pVersion;
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}
	
	//Permission returns Permissions:
	//    {Permission} name=permissionID
	//;
	public PermissionElements getPermissionAccess() {
		return pPermission;
	}
	
	public ParserRule getPermissionRule() {
		return getPermissionAccess().getRule();
	}
	
	////TODO : ADD every permission in android
	//permissionID returns PermissionID:
	//    name='ACCESS_MEDIA_LOCATION' |
	//    name='ACCESS_NETWORK_STATE'  |
	//    name='ACCESS_WIFI_STATE'     |
	//    name='INTERNET'
	//;
	public PermissionIDElements getPermissionIDAccess() {
		return pPermissionID;
	}
	
	public ParserRule getPermissionIDRule() {
		return getPermissionIDAccess().getRule();
	}
	
	////TODO : ADD network configurations (Trusted CA...)
	//Network returns Network:
	//    {Network} 'default'
	//;
	public NetworkElements getNetworkAccess() {
		return pNetwork;
	}
	
	public ParserRule getNetworkRule() {
		return getNetworkAccess().getRule();
	}
	
	//Function returns Function:
	//    Sink | Inflow
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Sink returns Sink:
	//    'Sink' name=EString
	//    '{'
	//        ('parameter' '{'
	//            parameter+=Parameter ( "," parameter+=Parameter)* '}'
	//        )?
	//    '}'
	//;
	public SinkElements getSinkAccess() {
		return pSink;
	}
	
	public ParserRule getSinkRule() {
		return getSinkAccess().getRule();
	}
	
	//Parameter returns Parameter:
	//    origin=[Function|FQN] |
	//    (static?='static' (anyValue?='*' | value=EString))
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Inflow returns Inflow:
	//    Source |
	//    Input
	//;
	public InflowElements getInflowAccess() {
		return pInflow;
	}
	
	public ParserRule getInflowRule() {
		return getInflowAccess().getRule();
	}
	
	//Source returns Source:
	//    {Source} 'Source' name=EString (anyPrivate?='*' | method=EString)
	//;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	//Input returns Input:
	//    {Input} 'Input' name=EString method=EString
	//;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//FQN hidden(): EString('.' EString)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
