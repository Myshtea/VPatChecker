/**
 * generated by Xtext 2.29.0
 */
package fr.lcis.castav.vpat.vPAT.impl;

import fr.lcis.castav.vpat.vPAT.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class VPATFactoryImpl extends EFactoryImpl implements VPATFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static VPATFactory init()
  {
    try
    {
      VPATFactory theVPATFactory = (VPATFactory)EPackage.Registry.INSTANCE.getEFactory(VPATPackage.eNS_URI);
      if (theVPATFactory != null)
      {
        return theVPATFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new VPATFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VPATFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case VPATPackage.VULNERABILITY: return createVulnerability();
      case VPATPackage.CONTEXT: return createContext();
      case VPATPackage.VERSION: return createVersion();
      case VPATPackage.PERMISSIONS: return createPermissions();
      case VPATPackage.PERMISSION_ID: return createPermissionID();
      case VPATPackage.NETWORK: return createNetwork();
      case VPATPackage.FUNCTION: return createFunction();
      case VPATPackage.SINK: return createSink();
      case VPATPackage.PARAMETER: return createParameter();
      case VPATPackage.INFLOW: return createInflow();
      case VPATPackage.SOURCE: return createSource();
      case VPATPackage.INPUT: return createInput();
      case VPATPackage.PERMISSION: return createPermission();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vulnerability createVulnerability()
  {
    VulnerabilityImpl vulnerability = new VulnerabilityImpl();
    return vulnerability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Context createContext()
  {
    ContextImpl context = new ContextImpl();
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Version createVersion()
  {
    VersionImpl version = new VersionImpl();
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Permissions createPermissions()
  {
    PermissionsImpl permissions = new PermissionsImpl();
    return permissions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PermissionID createPermissionID()
  {
    PermissionIDImpl permissionID = new PermissionIDImpl();
    return permissionID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Network createNetwork()
  {
    NetworkImpl network = new NetworkImpl();
    return network;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sink createSink()
  {
    SinkImpl sink = new SinkImpl();
    return sink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Inflow createInflow()
  {
    InflowImpl inflow = new InflowImpl();
    return inflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Source createSource()
  {
    SourceImpl source = new SourceImpl();
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Input createInput()
  {
    InputImpl input = new InputImpl();
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Permission createPermission()
  {
    PermissionImpl permission = new PermissionImpl();
    return permission;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VPATPackage getVPATPackage()
  {
    return (VPATPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static VPATPackage getPackage()
  {
    return VPATPackage.eINSTANCE;
  }

} //VPATFactoryImpl
