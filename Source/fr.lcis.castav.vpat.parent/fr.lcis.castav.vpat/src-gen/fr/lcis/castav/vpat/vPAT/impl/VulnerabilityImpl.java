/**
 * generated by Xtext 2.29.0
 */
package fr.lcis.castav.vpat.vPAT.impl;

import fr.lcis.castav.vpat.vPAT.Context;
import fr.lcis.castav.vpat.vPAT.Function;
import fr.lcis.castav.vpat.vPAT.Sink;
import fr.lcis.castav.vpat.vPAT.VPATPackage;
import fr.lcis.castav.vpat.vPAT.Vulnerability;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Vulnerability</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.lcis.castav.vpat.vPAT.impl.VulnerabilityImpl#getName <em>Name</em>}</li>
 *   <li>{@link fr.lcis.castav.vpat.vPAT.impl.VulnerabilityImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link fr.lcis.castav.vpat.vPAT.impl.VulnerabilityImpl#getContext <em>Context</em>}</li>
 *   <li>{@link fr.lcis.castav.vpat.vPAT.impl.VulnerabilityImpl#getMainFunction <em>Main Function</em>}</li>
 *   <li>{@link fr.lcis.castav.vpat.vPAT.impl.VulnerabilityImpl#getFunction <em>Function</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VulnerabilityImpl extends MinimalEObjectImpl.Container implements Vulnerability
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getContext() <em>Context</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContext()
   * @generated
   * @ordered
   */
  protected EList<Context> context;

  /**
   * The cached value of the '{@link #getMainFunction() <em>Main Function</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainFunction()
   * @generated
   * @ordered
   */
  protected Sink mainFunction;

  /**
   * The cached value of the '{@link #getFunction() <em>Function</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunction()
   * @generated
   * @ordered
   */
  protected EList<Function> function;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VulnerabilityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return VPATPackage.Literals.VULNERABILITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VPATPackage.VULNERABILITY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VPATPackage.VULNERABILITY__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Context> getContext()
  {
    if (context == null)
    {
      context = new EObjectContainmentEList<Context>(Context.class, this, VPATPackage.VULNERABILITY__CONTEXT);
    }
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sink getMainFunction()
  {
    return mainFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMainFunction(Sink newMainFunction, NotificationChain msgs)
  {
    Sink oldMainFunction = mainFunction;
    mainFunction = newMainFunction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VPATPackage.VULNERABILITY__MAIN_FUNCTION, oldMainFunction, newMainFunction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMainFunction(Sink newMainFunction)
  {
    if (newMainFunction != mainFunction)
    {
      NotificationChain msgs = null;
      if (mainFunction != null)
        msgs = ((InternalEObject)mainFunction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VPATPackage.VULNERABILITY__MAIN_FUNCTION, null, msgs);
      if (newMainFunction != null)
        msgs = ((InternalEObject)newMainFunction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VPATPackage.VULNERABILITY__MAIN_FUNCTION, null, msgs);
      msgs = basicSetMainFunction(newMainFunction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VPATPackage.VULNERABILITY__MAIN_FUNCTION, newMainFunction, newMainFunction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Function> getFunction()
  {
    if (function == null)
    {
      function = new EObjectContainmentEList<Function>(Function.class, this, VPATPackage.VULNERABILITY__FUNCTION);
    }
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case VPATPackage.VULNERABILITY__CONTEXT:
        return ((InternalEList<?>)getContext()).basicRemove(otherEnd, msgs);
      case VPATPackage.VULNERABILITY__MAIN_FUNCTION:
        return basicSetMainFunction(null, msgs);
      case VPATPackage.VULNERABILITY__FUNCTION:
        return ((InternalEList<?>)getFunction()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case VPATPackage.VULNERABILITY__NAME:
        return getName();
      case VPATPackage.VULNERABILITY__DESCRIPTION:
        return getDescription();
      case VPATPackage.VULNERABILITY__CONTEXT:
        return getContext();
      case VPATPackage.VULNERABILITY__MAIN_FUNCTION:
        return getMainFunction();
      case VPATPackage.VULNERABILITY__FUNCTION:
        return getFunction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case VPATPackage.VULNERABILITY__NAME:
        setName((String)newValue);
        return;
      case VPATPackage.VULNERABILITY__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case VPATPackage.VULNERABILITY__CONTEXT:
        getContext().clear();
        getContext().addAll((Collection<? extends Context>)newValue);
        return;
      case VPATPackage.VULNERABILITY__MAIN_FUNCTION:
        setMainFunction((Sink)newValue);
        return;
      case VPATPackage.VULNERABILITY__FUNCTION:
        getFunction().clear();
        getFunction().addAll((Collection<? extends Function>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case VPATPackage.VULNERABILITY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case VPATPackage.VULNERABILITY__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case VPATPackage.VULNERABILITY__CONTEXT:
        getContext().clear();
        return;
      case VPATPackage.VULNERABILITY__MAIN_FUNCTION:
        setMainFunction((Sink)null);
        return;
      case VPATPackage.VULNERABILITY__FUNCTION:
        getFunction().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case VPATPackage.VULNERABILITY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case VPATPackage.VULNERABILITY__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case VPATPackage.VULNERABILITY__CONTEXT:
        return context != null && !context.isEmpty();
      case VPATPackage.VULNERABILITY__MAIN_FUNCTION:
        return mainFunction != null;
      case VPATPackage.VULNERABILITY__FUNCTION:
        return function != null && !function.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", description: ");
    result.append(description);
    result.append(')');
    return result.toString();
  }

} //VulnerabilityImpl
