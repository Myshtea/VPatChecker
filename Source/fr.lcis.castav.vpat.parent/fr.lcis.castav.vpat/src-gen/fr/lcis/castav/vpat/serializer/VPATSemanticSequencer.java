/*
 * generated by Xtext 2.29.0
 */
package fr.lcis.castav.vpat.serializer;

import com.google.inject.Inject;
import fr.lcis.castav.vpat.services.VPATGrammarAccess;
import fr.lcis.castav.vpat.vPAT.Context;
import fr.lcis.castav.vpat.vPAT.Input;
import fr.lcis.castav.vpat.vPAT.Network;
import fr.lcis.castav.vpat.vPAT.Permission;
import fr.lcis.castav.vpat.vPAT.PermissionID;
import fr.lcis.castav.vpat.vPAT.Sink;
import fr.lcis.castav.vpat.vPAT.Source;
import fr.lcis.castav.vpat.vPAT.VPATPackage;
import fr.lcis.castav.vpat.vPAT.Version;
import fr.lcis.castav.vpat.vPAT.Vulnerability;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class VPATSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private VPATGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == VPATPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case VPATPackage.CONTEXT:
				sequence_Context(context, (Context) semanticObject); 
				return; 
			case VPATPackage.INPUT:
				sequence_Input(context, (Input) semanticObject); 
				return; 
			case VPATPackage.NETWORK:
				sequence_Network(context, (Network) semanticObject); 
				return; 
			case VPATPackage.PARAMETER:
				sequence_Parameter(context, (fr.lcis.castav.vpat.vPAT.Parameter) semanticObject); 
				return; 
			case VPATPackage.PERMISSION:
				sequence_Permission(context, (Permission) semanticObject); 
				return; 
			case VPATPackage.PERMISSION_ID:
				sequence_permissionID(context, (PermissionID) semanticObject); 
				return; 
			case VPATPackage.SINK:
				sequence_Sink(context, (Sink) semanticObject); 
				return; 
			case VPATPackage.SOURCE:
				sequence_Source(context, (Source) semanticObject); 
				return; 
			case VPATPackage.VERSION:
				sequence_Version(context, (Version) semanticObject); 
				return; 
			case VPATPackage.VULNERABILITY:
				sequence_Vulnerability(context, (Vulnerability) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Context returns Context
	 *
	 * Constraint:
	 *     ((Permission?='android.permission.' value=Permission) | (Network?='network' value=Network) | (Version?='apiversion' value=Version))
	 * </pre>
	 */
	protected void sequence_Context(ISerializationContext context, Context semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Function returns Input
	 *     Inflow returns Input
	 *     Input returns Input
	 *
	 * Constraint:
	 *     (name=EString method=EString)
	 * </pre>
	 */
	protected void sequence_Input(ISerializationContext context, Input semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VPATPackage.Literals.FUNCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VPATPackage.Literals.FUNCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, VPATPackage.Literals.INFLOW__METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VPATPackage.Literals.INFLOW__METHOD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInputAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInputAccess().getMethodEStringParserRuleCall_3_0(), semanticObject.getMethod());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Network returns Network
	 *
	 * Constraint:
	 *     {Network}
	 * </pre>
	 */
	protected void sequence_Network(ISerializationContext context, Network semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (origin=[Function|FQN] | (static?='static' (anyValue?='*' | value=EString)))
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, fr.lcis.castav.vpat.vPAT.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permission returns Permission
	 *
	 * Constraint:
	 *     name=permissionID
	 * </pre>
	 */
	protected void sequence_Permission(ISerializationContext context, Permission semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VPATPackage.Literals.PERMISSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VPATPackage.Literals.PERMISSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionAccess().getNamePermissionIDParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Function returns Sink
	 *     Sink returns Sink
	 *
	 * Constraint:
	 *     (name=EString (parameter+=Parameter parameter+=Parameter*)?)
	 * </pre>
	 */
	protected void sequence_Sink(ISerializationContext context, Sink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Function returns Source
	 *     Inflow returns Source
	 *     Source returns Source
	 *
	 * Constraint:
	 *     (name=EString (anyPrivate?='*' | method=EString))
	 * </pre>
	 */
	protected void sequence_Source(ISerializationContext context, Source semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Version returns Version
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Version(ISerializationContext context, Version semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VPATPackage.Literals.VERSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VPATPackage.Literals.VERSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVersionAccess().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Vulnerability returns Vulnerability
	 *
	 * Constraint:
	 *     (name=EString description=EString? (context+=Context context+=Context*)? (mainFunction=Sink | function+=Function)*)
	 * </pre>
	 */
	protected void sequence_Vulnerability(ISerializationContext context, Vulnerability semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     permissionID returns PermissionID
	 *
	 * Constraint:
	 *     (name='ACCESS_MEDIA_LOCATION' | name='ACCESS_NETWORK_STATE' | name='ACCESS_WIFI_STATE' | name='INTERNET')
	 * </pre>
	 */
	protected void sequence_permissionID(ISerializationContext context, PermissionID semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
