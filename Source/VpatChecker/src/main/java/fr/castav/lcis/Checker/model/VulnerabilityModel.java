package fr.castav.lcis.Checker.model;

import fr.lcis.castav.vpat.vPAT.Vulnerability;
import fr.castav.lcis.Checker.model.TestPaths.TestPath.State.Dataflows.Dataflow;
import fr.castav.lcis.Checker.model.TestPaths.TestPath;

/**
 * Model of a vulnerability pattern
 * Follows VPAT definition
 * 
 * @author baheuxbi
 *
 */
public class VulnerabilityModel {
	
	String name;
	String description;
	
	StaticContextModel staticContext = null;
	
	SinkModel mainSink = null;
	
	
	public VulnerabilityModel(Vulnerability vuln) {
		this.name = vuln.getName().replace("\"", "").replace(" ", "_");
		this.description = vuln.getDescription();
		this.staticContext = new StaticContextModel(vuln);
		
		mainSink = new SinkModel(vuln.getMainFunction());
	}
	
	/**
	 * Checks if a testpath's sink matches with this vulnerability's main sink
	 * 
	 * @param pathToCheck The path whose sink we check
	 * @param sink The sink of the path
	 * @return True if the sink matches else false
	 */
	public boolean checkSink(TestPath pathToCheck, Dataflow sink) {
		if (mainSink.contains(pathToCheck, sink)) {
			return true;
		}
		return false;
	}
	
	/**
	 * Checks if a testpath's static context matches with this vulnerability's static context
	 * For now (27/01) only implements the API version check
	 * 
	 * @param testStaticContext The static context to match with this vulnerability's static context
	 * @return True if the static context matches else false
	 */
	public boolean checkContext(TestPaths.StaticContext testStaticContext) {
		if(!this.hasContext()) {
			return true;
		}
		
		if(testStaticContext.getAPIVersion() != staticContext.getAPIVersion()) {
			return false;
		}
		
		return true;
	}
	
	
	@Override
	public String toString() {
		String ret = "[" + this.name + "]\n";
		ret += "    " + '{' + this.description + "}\n";
		ret += "    " + this.staticContext.toString() + "\n";
		ret += "    " + "Sink -> " + mainSink.toString()+"\n";
		return ret;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public StaticContextModel getStaticContext() {
		return staticContext;
	}

	public void setStaticContext(StaticContextModel staticContext) {
		this.staticContext = staticContext;
	}
	
	public SinkModel getSink() {
		return mainSink;
	}

	public void setSinks(SinkModel sink) {
		this.mainSink = sink;
	}
	
	public boolean hasContext() {
		if (this.staticContext.isEmpty())
			return false;
		
		return true;
	}
	
}
