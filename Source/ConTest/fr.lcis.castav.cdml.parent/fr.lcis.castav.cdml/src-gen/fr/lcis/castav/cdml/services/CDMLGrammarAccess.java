/*
 * generated by Xtext 2.29.0
 */
package fr.lcis.castav.cdml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CDMLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class CdmlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.Cdml");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cModelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cContextsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cContextsContextsParserRuleCall_0_3_0 = (RuleCall)cContextsAssignment_0_3.eContents().get(0);
		private final Assignment cStaticContextsAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cStaticContextsStaticContextsParserRuleCall_1_0 = (RuleCall)cStaticContextsAssignment_1.eContents().get(0);
		private final Assignment cSituationsAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cSituationsSituationsParserRuleCall_2_0 = (RuleCall)cSituationsAssignment_2.eContents().get(0);
		private final Assignment cStatemachinesAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cStatemachinesStatemachineParserRuleCall_3_0 = (RuleCall)cStatemachinesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Assignment cAdaptationsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cAdaptationsAdaptationParserRuleCall_4_0_0 = (RuleCall)cAdaptationsAssignment_4_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//Cdml:
		//    'model' name=EString '{'
		//        ((contexts+=Contexts)?) &
		//        ((staticContexts+=StaticContexts)?) &
		//        ((situations+=Situations)?) &
		//        (statemachines+=Statemachine+) &
		//        (adaptations+=Adaptation*)
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' name=EString '{'
		//    ((contexts+=Contexts)?) &
		//    ((staticContexts+=StaticContexts)?) &
		//    ((situations+=Situations)?) &
		//    (statemachines+=Statemachine+) &
		//    (adaptations+=Adaptation*)
		//'}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'model' name=EString '{'
		//    ((contexts+=Contexts)?)
		public Group getGroup_0() { return cGroup_0; }
		
		//'model'
		public Keyword getModelKeyword_0_0() { return cModelKeyword_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_1_0() { return cNameEStringParserRuleCall_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//((contexts+=Contexts)?)
		public Assignment getContextsAssignment_0_3() { return cContextsAssignment_0_3; }
		
		//Contexts
		public RuleCall getContextsContextsParserRuleCall_0_3_0() { return cContextsContextsParserRuleCall_0_3_0; }
		
		//((staticContexts+=StaticContexts)?)
		public Assignment getStaticContextsAssignment_1() { return cStaticContextsAssignment_1; }
		
		//StaticContexts
		public RuleCall getStaticContextsStaticContextsParserRuleCall_1_0() { return cStaticContextsStaticContextsParserRuleCall_1_0; }
		
		//((situations+=Situations)?)
		public Assignment getSituationsAssignment_2() { return cSituationsAssignment_2; }
		
		//Situations
		public RuleCall getSituationsSituationsParserRuleCall_2_0() { return cSituationsSituationsParserRuleCall_2_0; }
		
		//(statemachines+=Statemachine+)
		public Assignment getStatemachinesAssignment_3() { return cStatemachinesAssignment_3; }
		
		//Statemachine
		public RuleCall getStatemachinesStatemachineParserRuleCall_3_0() { return cStatemachinesStatemachineParserRuleCall_3_0; }
		
		//    (adaptations+=Adaptation*)
		//'}'
		public Group getGroup_4() { return cGroup_4; }
		
		//(adaptations+=Adaptation*)
		public Assignment getAdaptationsAssignment_4_0() { return cAdaptationsAssignment_4_0; }
		
		//Adaptation
		public RuleCall getAdaptationsAdaptationParserRuleCall_4_0_0() { return cAdaptationsAdaptationParserRuleCall_4_0_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1() { return cRightCurlyBracketKeyword_4_1; }
	}
	public class ContextsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.Contexts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContextsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContextsContextParserRuleCall_2_0 = (RuleCall)cContextsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContextsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cContextsContextParserRuleCall_3_1_0 = (RuleCall)cContextsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///*
		// * Dynamic context whose applications depend on
		// */
		//Contexts:
		//    'contexts' '{'
		//        contexts+=Context (',' contexts+=Context)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'contexts' '{'
		//    contexts+=Context (',' contexts+=Context)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'contexts'
		public Keyword getContextsKeyword_0() { return cContextsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//contexts+=Context
		public Assignment getContextsAssignment_2() { return cContextsAssignment_2; }
		
		//Context
		public RuleCall getContextsContextParserRuleCall_2_0() { return cContextsContextParserRuleCall_2_0; }
		
		//(',' contexts+=Context)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//contexts+=Context
		public Assignment getContextsAssignment_3_1() { return cContextsAssignment_3_1; }
		
		//Context
		public RuleCall getContextsContextParserRuleCall_3_1_0() { return cContextsContextParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.Context");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Context:
		//    name=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0() { return cNameEStringParserRuleCall_0; }
	}
	public class StaticContextsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.StaticContexts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStaticKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cContextsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStaticContextsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStaticContextsStaticContextParserRuleCall_3_0 = (RuleCall)cStaticContextsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStaticContextsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStaticContextsStaticContextParserRuleCall_4_1_0 = (RuleCall)cStaticContextsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///*
		// * Static Context that define the application
		// */
		//StaticContexts:
		//    'static' 'contexts' '{'
		//        staticContexts+=StaticContext (',' staticContexts+=StaticContext)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'static' 'contexts' '{'
		//    staticContexts+=StaticContext (',' staticContexts+=StaticContext)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'static'
		public Keyword getStaticKeyword_0() { return cStaticKeyword_0; }
		
		//'contexts'
		public Keyword getContextsKeyword_1() { return cContextsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//staticContexts+=StaticContext
		public Assignment getStaticContextsAssignment_3() { return cStaticContextsAssignment_3; }
		
		//StaticContext
		public RuleCall getStaticContextsStaticContextParserRuleCall_3_0() { return cStaticContextsStaticContextParserRuleCall_3_0; }
		
		//(',' staticContexts+=StaticContext)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//staticContexts+=StaticContext
		public Assignment getStaticContextsAssignment_4_1() { return cStaticContextsAssignment_4_1; }
		
		//StaticContext
		public RuleCall getStaticContextsStaticContextParserRuleCall_4_1_0() { return cStaticContextsStaticContextParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StaticContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.StaticContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//StaticContext:
		//    name=EString '=' value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class SituationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.Situations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSituationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSituationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSituationsSituationParserRuleCall_2_0 = (RuleCall)cSituationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSituationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSituationsSituationParserRuleCall_3_1_0 = (RuleCall)cSituationsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///*
		// * Situations that exist in the context of the application.
		// * Each situation links to which context changes said situation
		// */
		//Situations:
		//    'situations' '{'
		//        situations+=Situation (',' situations+=Situation)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'situations' '{'
		//    situations+=Situation (',' situations+=Situation)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'situations'
		public Keyword getSituationsKeyword_0() { return cSituationsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//situations+=Situation
		public Assignment getSituationsAssignment_2() { return cSituationsAssignment_2; }
		
		//Situation
		public RuleCall getSituationsSituationParserRuleCall_2_0() { return cSituationsSituationParserRuleCall_2_0; }
		
		//(',' situations+=Situation)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//situations+=Situation
		public Assignment getSituationsAssignment_3_1() { return cSituationsAssignment_3_1; }
		
		//Situation
		public RuleCall getSituationsSituationParserRuleCall_3_1_0() { return cSituationsSituationParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SituationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.Situation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContextContextCrossReference_2_0 = (CrossReference)cContextAssignment_2.eContents().get(0);
		private final RuleCall cContextContextIDTerminalRuleCall_2_0_1 = (RuleCall)cContextContextCrossReference_2_0.eContents().get(1);
		
		//Situation:
		//    name=EString ":" context=[Context|ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ":" context=[Context|ID]
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//context=[Context|ID]
		public Assignment getContextAssignment_2() { return cContextAssignment_2; }
		
		//[Context|ID]
		public CrossReference getContextContextCrossReference_2_0() { return cContextContextCrossReference_2_0; }
		
		//ID
		public RuleCall getContextContextIDTerminalRuleCall_2_0_1() { return cContextContextIDTerminalRuleCall_2_0_1; }
	}
	public class StatemachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.Statemachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatemachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExportedAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cExportedExportedKeyword_2_0_0 = (Keyword)cExportedAssignment_2_0.eContents().get(0);
		private final Assignment cPermissionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPermissionPermissionParserRuleCall_2_1_0 = (RuleCall)cPermissionAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatesStateParserRuleCall_4_0 = (RuleCall)cStatesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///*
		// * FSM defining a specific component
		// */
		//Statemachine:
		//    'statemachine' name=EString (exported?='exported' (permission=Permission)?)?'{'
		//        states+=State*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'statemachine' name=EString (exported?='exported' (permission=Permission)?)?'{'
		//    states+=State*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'statemachine'
		public Keyword getStatemachineKeyword_0() { return cStatemachineKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//(exported?='exported' (permission=Permission)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//exported?='exported'
		public Assignment getExportedAssignment_2_0() { return cExportedAssignment_2_0; }
		
		//'exported'
		public Keyword getExportedExportedKeyword_2_0_0() { return cExportedExportedKeyword_2_0_0; }
		
		//(permission=Permission)?
		public Assignment getPermissionAssignment_2_1() { return cPermissionAssignment_2_1; }
		
		//Permission
		public RuleCall getPermissionPermissionParserRuleCall_2_1_0() { return cPermissionPermissionParserRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//states+=State*
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_4_0() { return cStatesStateParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAtomicStateParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSuperStateParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTransitionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_1_1_0 = (RuleCall)cTransitionsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cDataflowsKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cDataflowsAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cDataflowsDataFlowParserRuleCall_1_2_2_0 = (RuleCall)cDataflowsAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Keyword cCommaKeyword_1_2_3_0 = (Keyword)cGroup_1_2_3.eContents().get(0);
		private final Assignment cDataflowsAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cDataflowsDataFlowParserRuleCall_1_2_3_1_0 = (RuleCall)cDataflowsAssignment_1_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2_4 = (Keyword)cGroup_1_2.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//State:
		//    (AtomicState | SuperState)
		//    (
		//        '{'
		//            transitions+=Transition*
		//            ('dataflows' '{' dataflows+=DataFlow (',' dataflows+=DataFlow)* '}')?
		//        '}'
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(AtomicState | SuperState)
		//(
		//    '{'
		//        transitions+=Transition*
		//        ('dataflows' '{' dataflows+=DataFlow (',' dataflows+=DataFlow)* '}')?
		//    '}'
		//)?
		public Group getGroup() { return cGroup; }
		
		//(AtomicState | SuperState)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//AtomicState
		public RuleCall getAtomicStateParserRuleCall_0_0() { return cAtomicStateParserRuleCall_0_0; }
		
		//SuperState
		public RuleCall getSuperStateParserRuleCall_0_1() { return cSuperStateParserRuleCall_0_1; }
		
		//(
		//    '{'
		//        transitions+=Transition*
		//        ('dataflows' '{' dataflows+=DataFlow (',' dataflows+=DataFlow)* '}')?
		//    '}'
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//transitions+=Transition*
		public Assignment getTransitionsAssignment_1_1() { return cTransitionsAssignment_1_1; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_1_1_0() { return cTransitionsTransitionParserRuleCall_1_1_0; }
		
		//('dataflows' '{' dataflows+=DataFlow (',' dataflows+=DataFlow)* '}')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'dataflows'
		public Keyword getDataflowsKeyword_1_2_0() { return cDataflowsKeyword_1_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2_1() { return cLeftCurlyBracketKeyword_1_2_1; }
		
		//dataflows+=DataFlow
		public Assignment getDataflowsAssignment_1_2_2() { return cDataflowsAssignment_1_2_2; }
		
		//DataFlow
		public RuleCall getDataflowsDataFlowParserRuleCall_1_2_2_0() { return cDataflowsDataFlowParserRuleCall_1_2_2_0; }
		
		//(',' dataflows+=DataFlow)*
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }
		
		//','
		public Keyword getCommaKeyword_1_2_3_0() { return cCommaKeyword_1_2_3_0; }
		
		//dataflows+=DataFlow
		public Assignment getDataflowsAssignment_1_2_3_1() { return cDataflowsAssignment_1_2_3_1; }
		
		//DataFlow
		public RuleCall getDataflowsDataFlowParserRuleCall_1_2_3_1_0() { return cDataflowsDataFlowParserRuleCall_1_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2_4() { return cRightCurlyBracketKeyword_1_2_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class AtomicStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.AtomicState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cContextAwareAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cContextAwareAwareofKeyword_2_0_0 = (Keyword)cContextAwareAssignment_2_0.eContents().get(0);
		private final Assignment cContextsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cContextsContextCrossReference_2_1_0 = (CrossReference)cContextsAssignment_2_1.eContents().get(0);
		private final RuleCall cContextsContextIDTerminalRuleCall_2_1_0_1 = (RuleCall)cContextsContextCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cContextsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cContextsContextCrossReference_2_2_1_0 = (CrossReference)cContextsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cContextsContextIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cContextsContextCrossReference_2_2_1_0.eContents().get(1);
		
		//AtomicState:
		//    'state' name=EString (contextAware?='awareof' contexts+=[Context] (',' contexts+=[Context])*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'state' name=EString (contextAware?='awareof' contexts+=[Context] (',' contexts+=[Context])*)?
		public Group getGroup() { return cGroup; }
		
		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//(contextAware?='awareof' contexts+=[Context] (',' contexts+=[Context])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//contextAware?='awareof'
		public Assignment getContextAwareAssignment_2_0() { return cContextAwareAssignment_2_0; }
		
		//'awareof'
		public Keyword getContextAwareAwareofKeyword_2_0_0() { return cContextAwareAwareofKeyword_2_0_0; }
		
		//contexts+=[Context]
		public Assignment getContextsAssignment_2_1() { return cContextsAssignment_2_1; }
		
		//[Context]
		public CrossReference getContextsContextCrossReference_2_1_0() { return cContextsContextCrossReference_2_1_0; }
		
		//ID
		public RuleCall getContextsContextIDTerminalRuleCall_2_1_0_1() { return cContextsContextIDTerminalRuleCall_2_1_0_1; }
		
		//(',' contexts+=[Context])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//contexts+=[Context]
		public Assignment getContextsAssignment_2_2_1() { return cContextsAssignment_2_2_1; }
		
		//[Context]
		public CrossReference getContextsContextCrossReference_2_2_1_0() { return cContextsContextCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getContextsContextIDTerminalRuleCall_2_2_1_0_1() { return cContextsContextIDTerminalRuleCall_2_2_1_0_1; }
	}
	public class SuperStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.SuperState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cAbstractsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAbstractsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAbstractsStatemachineCrossReference_4_0 = (CrossReference)cAbstractsAssignment_4.eContents().get(0);
		private final RuleCall cAbstractsStatemachineIDTerminalRuleCall_4_0_1 = (RuleCall)cAbstractsStatemachineCrossReference_4_0.eContents().get(1);
		
		//SuperState:
		//    'super' 'state' name=EString 'abstracts' abstracts=[Statemachine]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'super' 'state' name=EString 'abstracts' abstracts=[Statemachine]
		public Group getGroup() { return cGroup; }
		
		//'super'
		public Keyword getSuperKeyword_0() { return cSuperKeyword_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'abstracts'
		public Keyword getAbstractsKeyword_3() { return cAbstractsKeyword_3; }
		
		//abstracts=[Statemachine]
		public Assignment getAbstractsAssignment_4() { return cAbstractsAssignment_4; }
		
		//[Statemachine]
		public CrossReference getAbstractsStatemachineCrossReference_4_0() { return cAbstractsStatemachineCrossReference_4_0; }
		
		//ID
		public RuleCall getAbstractsStatemachineIDTerminalRuleCall_4_0_1() { return cAbstractsStatemachineIDTerminalRuleCall_4_0_1; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTransitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOnKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOnAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOnEventParserRuleCall_2_1_0 = (RuleCall)cOnAssignment_2_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cExternalAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final Keyword cExternalExternalKeyword_4_0_0_0 = (Keyword)cExternalAssignment_4_0_0.eContents().get(0);
		private final Assignment cTargetAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final CrossReference cTargetStateCrossReference_4_0_1_0 = (CrossReference)cTargetAssignment_4_0_1.eContents().get(0);
		private final RuleCall cTargetStateFQNParserRuleCall_4_0_1_0_1 = (RuleCall)cTargetStateCrossReference_4_0_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cTargetStateCrossReference_4_1_0 = (CrossReference)cTargetAssignment_4_1.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_4_1_0_1 = (RuleCall)cTargetStateCrossReference_4_1_0.eContents().get(1);
		
		////External transition: source and target states do not belong to the same statemachine
		//Transition:
		//    {Transition} 'transition' ('on' on=Event)? '->' ((external?='external'  target=[State|FQN] )? | target=[State])
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Transition} 'transition' ('on' on=Event)? '->' ((external?='external'  target=[State|FQN] )? | target=[State])
		public Group getGroup() { return cGroup; }
		
		//{Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//'transition'
		public Keyword getTransitionKeyword_1() { return cTransitionKeyword_1; }
		
		//('on' on=Event)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'on'
		public Keyword getOnKeyword_2_0() { return cOnKeyword_2_0; }
		
		//on=Event
		public Assignment getOnAssignment_2_1() { return cOnAssignment_2_1; }
		
		//Event
		public RuleCall getOnEventParserRuleCall_2_1_0() { return cOnEventParserRuleCall_2_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//((external?='external'  target=[State|FQN] )? | target=[State])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//(external?='external'  target=[State|FQN] )?
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//external?='external'
		public Assignment getExternalAssignment_4_0_0() { return cExternalAssignment_4_0_0; }
		
		//'external'
		public Keyword getExternalExternalKeyword_4_0_0_0() { return cExternalExternalKeyword_4_0_0_0; }
		
		//target=[State|FQN]
		public Assignment getTargetAssignment_4_0_1() { return cTargetAssignment_4_0_1; }
		
		//[State|FQN]
		public CrossReference getTargetStateCrossReference_4_0_1_0() { return cTargetStateCrossReference_4_0_1_0; }
		
		//FQN
		public RuleCall getTargetStateFQNParserRuleCall_4_0_1_0_1() { return cTargetStateFQNParserRuleCall_4_0_1_0_1; }
		
		//target=[State]
		public Assignment getTargetAssignment_4_1() { return cTargetAssignment_4_1; }
		
		//[State]
		public CrossReference getTargetStateCrossReference_4_1_0() { return cTargetStateCrossReference_4_1_0; }
		
		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_4_1_0_1() { return cTargetStateIDTerminalRuleCall_4_1_0_1; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.Event");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Event:
		//    name=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0() { return cNameEStringParserRuleCall_0; }
	}
	public class PermissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.Permission");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNormalAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNormalNormalKeyword_0_0_0 = (Keyword)cNormalAssignment_0_0.eContents().get(0);
		private final Assignment cPermissionValuesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPermissionValuesPermissionValueParserRuleCall_0_1_0 = (RuleCall)cPermissionValuesAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cPermissionValuesAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cPermissionValuesPermissionValueParserRuleCall_0_2_1_0 = (RuleCall)cPermissionValuesAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDangerousAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cDangerousDangerousKeyword_1_0_0 = (Keyword)cDangerousAssignment_1_0.eContents().get(0);
		private final Assignment cPermissionValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPermissionValuesPermissionValueParserRuleCall_1_1_0 = (RuleCall)cPermissionValuesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cPermissionValuesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cPermissionValuesPermissionValueParserRuleCall_1_2_1_0 = (RuleCall)cPermissionValuesAssignment_1_2_1.eContents().get(0);
		private final Assignment cSignatureAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cSignatureSignatureKeyword_2_0 = (Keyword)cSignatureAssignment_2.eContents().get(0);
		private final Assignment cSignatureOrSystemAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cSignatureOrSystemSignatureOrSystemKeyword_3_0 = (Keyword)cSignatureOrSystemAssignment_3.eContents().get(0);
		
		///**
		// * Permission defining what we need to start said component/FSM
		// */
		//Permission:
		//    (
		//        normal?='normal'         permissionValues+=PermissionValue (',' permissionValues+=PermissionValue)* |
		//        dangerous?='dangerous'  permissionValues+=PermissionValue (',' permissionValues+=PermissionValue)* |
		//        signature?='signature' |
		//        signatureOrSystem?='signatureOrSystem'
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    normal?='normal'         permissionValues+=PermissionValue (',' permissionValues+=PermissionValue)* |
		//    dangerous?='dangerous'  permissionValues+=PermissionValue (',' permissionValues+=PermissionValue)* |
		//    signature?='signature' |
		//    signatureOrSystem?='signatureOrSystem'
		//)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//normal?='normal' 		permissionValues+=PermissionValue (',' permissionValues+=PermissionValue)*
		public Group getGroup_0() { return cGroup_0; }
		
		//normal?='normal'
		public Assignment getNormalAssignment_0_0() { return cNormalAssignment_0_0; }
		
		//'normal'
		public Keyword getNormalNormalKeyword_0_0_0() { return cNormalNormalKeyword_0_0_0; }
		
		//permissionValues+=PermissionValue
		public Assignment getPermissionValuesAssignment_0_1() { return cPermissionValuesAssignment_0_1; }
		
		//PermissionValue
		public RuleCall getPermissionValuesPermissionValueParserRuleCall_0_1_0() { return cPermissionValuesPermissionValueParserRuleCall_0_1_0; }
		
		//(',' permissionValues+=PermissionValue)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//permissionValues+=PermissionValue
		public Assignment getPermissionValuesAssignment_0_2_1() { return cPermissionValuesAssignment_0_2_1; }
		
		//PermissionValue
		public RuleCall getPermissionValuesPermissionValueParserRuleCall_0_2_1_0() { return cPermissionValuesPermissionValueParserRuleCall_0_2_1_0; }
		
		//dangerous?='dangerous'  permissionValues+=PermissionValue (',' permissionValues+=PermissionValue)*
		public Group getGroup_1() { return cGroup_1; }
		
		//dangerous?='dangerous'
		public Assignment getDangerousAssignment_1_0() { return cDangerousAssignment_1_0; }
		
		//'dangerous'
		public Keyword getDangerousDangerousKeyword_1_0_0() { return cDangerousDangerousKeyword_1_0_0; }
		
		//permissionValues+=PermissionValue
		public Assignment getPermissionValuesAssignment_1_1() { return cPermissionValuesAssignment_1_1; }
		
		//PermissionValue
		public RuleCall getPermissionValuesPermissionValueParserRuleCall_1_1_0() { return cPermissionValuesPermissionValueParserRuleCall_1_1_0; }
		
		//(',' permissionValues+=PermissionValue)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//permissionValues+=PermissionValue
		public Assignment getPermissionValuesAssignment_1_2_1() { return cPermissionValuesAssignment_1_2_1; }
		
		//PermissionValue
		public RuleCall getPermissionValuesPermissionValueParserRuleCall_1_2_1_0() { return cPermissionValuesPermissionValueParserRuleCall_1_2_1_0; }
		
		//signature?='signature'
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }
		
		//'signature'
		public Keyword getSignatureSignatureKeyword_2_0() { return cSignatureSignatureKeyword_2_0; }
		
		//signatureOrSystem?='signatureOrSystem'
		public Assignment getSignatureOrSystemAssignment_3() { return cSignatureOrSystemAssignment_3; }
		
		//'signatureOrSystem'
		public Keyword getSignatureOrSystemSignatureOrSystemKeyword_3_0() { return cSignatureOrSystemSignatureOrSystemKeyword_3_0; }
	}
	public class PermissionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.PermissionValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PermissionValue:
		//    name=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0() { return cNameEStringParserRuleCall_0; }
	}
	public class DataFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.DataFlow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * Enriched model part: Contains information on source/sink inside the model
		// */
		//DataFlow:
		//    (Source | Sink)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Source | Sink)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Source
		public RuleCall getSourceParserRuleCall_0() { return cSourceParserRuleCall_0; }
		
		//Sink
		public RuleCall getSinkParserRuleCall_1() { return cSinkParserRuleCall_1; }
	}
	public class SinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.Sink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sink:
		//    'sink' name=EString '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'sink' name=EString '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'sink'
		public Keyword getSinkKeyword_0() { return cSinkKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0_0() { return cParametersParameterParserRuleCall_3_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_1_0() { return cParametersParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cWildcardAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cWildcardAsteriskKeyword_0_0 = (Keyword)cWildcardAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cSourceAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cSourceSourceKeyword_2_0_0 = (Keyword)cSourceAssignment_2_0.eContents().get(0);
		private final Assignment cOriginAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cOriginSourceCrossReference_2_1_0 = (CrossReference)cOriginAssignment_2_1.eContents().get(0);
		private final RuleCall cOriginSourceFQNParserRuleCall_2_1_0_1 = (RuleCall)cOriginSourceCrossReference_2_1_0.eContents().get(1);
		
		//Parameter:
		//    (wildcard?='*') | value=ID | (source?='source') origin=[Source|FQN]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(wildcard?='*') | value=ID | (source?='source') origin=[Source|FQN]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(wildcard?='*')
		public Assignment getWildcardAssignment_0() { return cWildcardAssignment_0; }
		
		//'*'
		public Keyword getWildcardAsteriskKeyword_0_0() { return cWildcardAsteriskKeyword_0_0; }
		
		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
		
		//(source?='source') origin=[Source|FQN]
		public Group getGroup_2() { return cGroup_2; }
		
		//(source?='source')
		public Assignment getSourceAssignment_2_0() { return cSourceAssignment_2_0; }
		
		//'source'
		public Keyword getSourceSourceKeyword_2_0_0() { return cSourceSourceKeyword_2_0_0; }
		
		//origin=[Source|FQN]
		public Assignment getOriginAssignment_2_1() { return cOriginAssignment_2_1; }
		
		//[Source|FQN]
		public CrossReference getOriginSourceCrossReference_2_1_0() { return cOriginSourceCrossReference_2_1_0; }
		
		//FQN
		public RuleCall getOriginSourceFQNParserRuleCall_2_1_0_1() { return cOriginSourceFQNParserRuleCall_2_1_0_1; }
	}
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInputInputKeyword_0_0 = (Keyword)cInputAssignment_0.eContents().get(0);
		private final Keyword cSourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Source:
		//    (input?='input')? 'source' name=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(input?='input')? 'source' name=EString
		public Group getGroup() { return cGroup; }
		
		//(input?='input')?
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }
		
		//'input'
		public Keyword getInputInputKeyword_0_0() { return cInputInputKeyword_0_0; }
		
		//'source'
		public Keyword getSourceKeyword_1() { return cSourceKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class AdaptationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.Adaptation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdaptationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSituationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSituationsSituationCrossReference_2_0 = (CrossReference)cSituationsAssignment_2.eContents().get(0);
		private final RuleCall cSituationsSituationIDTerminalRuleCall_2_0_1 = (RuleCall)cSituationsSituationCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSituationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSituationsSituationCrossReference_3_1_0 = (CrossReference)cSituationsAssignment_3_1.eContents().get(0);
		private final RuleCall cSituationsSituationIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSituationsSituationCrossReference_3_1_0.eContents().get(1);
		private final Keyword cAtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cStateStateCrossReference_5_0 = (CrossReference)cStateAssignment_5.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_5_0_1 = (RuleCall)cStateStateCrossReference_5_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatesStateParserRuleCall_7_0 = (RuleCall)cStatesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///**
		// * Defines states that happen in specific situations only
		// */
		//Adaptation:
		//    'adaptation' 'for' situations+=[Situation] (',' situations+=[Situation])* 'at' state=[State]
		//    '{'
		//        states+=State*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'adaptation' 'for' situations+=[Situation] (',' situations+=[Situation])* 'at' state=[State]
		//'{'
		//    states+=State*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'adaptation'
		public Keyword getAdaptationKeyword_0() { return cAdaptationKeyword_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//situations+=[Situation]
		public Assignment getSituationsAssignment_2() { return cSituationsAssignment_2; }
		
		//[Situation]
		public CrossReference getSituationsSituationCrossReference_2_0() { return cSituationsSituationCrossReference_2_0; }
		
		//ID
		public RuleCall getSituationsSituationIDTerminalRuleCall_2_0_1() { return cSituationsSituationIDTerminalRuleCall_2_0_1; }
		
		//(',' situations+=[Situation])*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//situations+=[Situation]
		public Assignment getSituationsAssignment_3_1() { return cSituationsAssignment_3_1; }
		
		//[Situation]
		public CrossReference getSituationsSituationCrossReference_3_1_0() { return cSituationsSituationCrossReference_3_1_0; }
		
		//ID
		public RuleCall getSituationsSituationIDTerminalRuleCall_3_1_0_1() { return cSituationsSituationIDTerminalRuleCall_3_1_0_1; }
		
		//'at'
		public Keyword getAtKeyword_4() { return cAtKeyword_4; }
		
		//state=[State]
		public Assignment getStateAssignment_5() { return cStateAssignment_5; }
		
		//[State]
		public CrossReference getStateStateCrossReference_5_0() { return cStateStateCrossReference_5_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_5_0_1() { return cStateStateIDTerminalRuleCall_5_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//states+=State*
		public Assignment getStatesAssignment_7() { return cStatesAssignment_7; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_7_0() { return cStatesStateParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEStringParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEStringParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN hidden(): EString('.' EString)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EString('.' EString)*
		public Group getGroup() { return cGroup; }
		
		//EString
		public RuleCall getEStringParserRuleCall_0() { return cEStringParserRuleCall_0; }
		
		//('.' EString)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//EString
		public RuleCall getEStringParserRuleCall_1_1() { return cEStringParserRuleCall_1_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdml.CDML.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final CdmlElements pCdml;
	private final ContextsElements pContexts;
	private final ContextElements pContext;
	private final StaticContextsElements pStaticContexts;
	private final StaticContextElements pStaticContext;
	private final SituationsElements pSituations;
	private final SituationElements pSituation;
	private final StatemachineElements pStatemachine;
	private final StateElements pState;
	private final AtomicStateElements pAtomicState;
	private final SuperStateElements pSuperState;
	private final TransitionElements pTransition;
	private final EventElements pEvent;
	private final PermissionElements pPermission;
	private final PermissionValueElements pPermissionValue;
	private final DataFlowElements pDataFlow;
	private final SinkElements pSink;
	private final ParameterElements pParameter;
	private final SourceElements pSource;
	private final AdaptationElements pAdaptation;
	private final FQNElements pFQN;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CDMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCdml = new CdmlElements();
		this.pContexts = new ContextsElements();
		this.pContext = new ContextElements();
		this.pStaticContexts = new StaticContextsElements();
		this.pStaticContext = new StaticContextElements();
		this.pSituations = new SituationsElements();
		this.pSituation = new SituationElements();
		this.pStatemachine = new StatemachineElements();
		this.pState = new StateElements();
		this.pAtomicState = new AtomicStateElements();
		this.pSuperState = new SuperStateElements();
		this.pTransition = new TransitionElements();
		this.pEvent = new EventElements();
		this.pPermission = new PermissionElements();
		this.pPermissionValue = new PermissionValueElements();
		this.pDataFlow = new DataFlowElements();
		this.pSink = new SinkElements();
		this.pParameter = new ParameterElements();
		this.pSource = new SourceElements();
		this.pAdaptation = new AdaptationElements();
		this.pFQN = new FQNElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.lcis.castav.cdml.CDML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Cdml:
	//    'model' name=EString '{'
	//        ((contexts+=Contexts)?) &
	//        ((staticContexts+=StaticContexts)?) &
	//        ((situations+=Situations)?) &
	//        (statemachines+=Statemachine+) &
	//        (adaptations+=Adaptation*)
	//    '}'
	//;
	public CdmlElements getCdmlAccess() {
		return pCdml;
	}
	
	public ParserRule getCdmlRule() {
		return getCdmlAccess().getRule();
	}
	
	///*
	// * Dynamic context whose applications depend on
	// */
	//Contexts:
	//    'contexts' '{'
	//        contexts+=Context (',' contexts+=Context)*
	//    '}'
	//;
	public ContextsElements getContextsAccess() {
		return pContexts;
	}
	
	public ParserRule getContextsRule() {
		return getContextsAccess().getRule();
	}
	
	//Context:
	//    name=EString
	//;
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	///*
	// * Static Context that define the application
	// */
	//StaticContexts:
	//    'static' 'contexts' '{'
	//        staticContexts+=StaticContext (',' staticContexts+=StaticContext)*
	//    '}'
	//;
	public StaticContextsElements getStaticContextsAccess() {
		return pStaticContexts;
	}
	
	public ParserRule getStaticContextsRule() {
		return getStaticContextsAccess().getRule();
	}
	
	//StaticContext:
	//    name=EString '=' value=STRING
	//;
	public StaticContextElements getStaticContextAccess() {
		return pStaticContext;
	}
	
	public ParserRule getStaticContextRule() {
		return getStaticContextAccess().getRule();
	}
	
	///*
	// * Situations that exist in the context of the application.
	// * Each situation links to which context changes said situation
	// */
	//Situations:
	//    'situations' '{'
	//        situations+=Situation (',' situations+=Situation)*
	//    '}'
	//;
	public SituationsElements getSituationsAccess() {
		return pSituations;
	}
	
	public ParserRule getSituationsRule() {
		return getSituationsAccess().getRule();
	}
	
	//Situation:
	//    name=EString ":" context=[Context|ID]
	//;
	public SituationElements getSituationAccess() {
		return pSituation;
	}
	
	public ParserRule getSituationRule() {
		return getSituationAccess().getRule();
	}
	
	///*
	// * FSM defining a specific component
	// */
	//Statemachine:
	//    'statemachine' name=EString (exported?='exported' (permission=Permission)?)?'{'
	//        states+=State*
	//    '}'
	//;
	public StatemachineElements getStatemachineAccess() {
		return pStatemachine;
	}
	
	public ParserRule getStatemachineRule() {
		return getStatemachineAccess().getRule();
	}
	
	//State:
	//    (AtomicState | SuperState)
	//    (
	//        '{'
	//            transitions+=Transition*
	//            ('dataflows' '{' dataflows+=DataFlow (',' dataflows+=DataFlow)* '}')?
	//        '}'
	//    )?
	//;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//AtomicState:
	//    'state' name=EString (contextAware?='awareof' contexts+=[Context] (',' contexts+=[Context])*)?
	//;
	public AtomicStateElements getAtomicStateAccess() {
		return pAtomicState;
	}
	
	public ParserRule getAtomicStateRule() {
		return getAtomicStateAccess().getRule();
	}
	
	//SuperState:
	//    'super' 'state' name=EString 'abstracts' abstracts=[Statemachine]
	//;
	public SuperStateElements getSuperStateAccess() {
		return pSuperState;
	}
	
	public ParserRule getSuperStateRule() {
		return getSuperStateAccess().getRule();
	}
	
	////External transition: source and target states do not belong to the same statemachine
	//Transition:
	//    {Transition} 'transition' ('on' on=Event)? '->' ((external?='external'  target=[State|FQN] )? | target=[State])
	//;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Event:
	//    name=EString
	//;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	///**
	// * Permission defining what we need to start said component/FSM
	// */
	//Permission:
	//    (
	//        normal?='normal'         permissionValues+=PermissionValue (',' permissionValues+=PermissionValue)* |
	//        dangerous?='dangerous'  permissionValues+=PermissionValue (',' permissionValues+=PermissionValue)* |
	//        signature?='signature' |
	//        signatureOrSystem?='signatureOrSystem'
	//    )
	//;
	public PermissionElements getPermissionAccess() {
		return pPermission;
	}
	
	public ParserRule getPermissionRule() {
		return getPermissionAccess().getRule();
	}
	
	//PermissionValue:
	//    name=EString
	//;
	public PermissionValueElements getPermissionValueAccess() {
		return pPermissionValue;
	}
	
	public ParserRule getPermissionValueRule() {
		return getPermissionValueAccess().getRule();
	}
	
	///*
	// * Enriched model part: Contains information on source/sink inside the model
	// */
	//DataFlow:
	//    (Source | Sink)
	//;
	public DataFlowElements getDataFlowAccess() {
		return pDataFlow;
	}
	
	public ParserRule getDataFlowRule() {
		return getDataFlowAccess().getRule();
	}
	
	//Sink:
	//    'sink' name=EString '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
	//;
	public SinkElements getSinkAccess() {
		return pSink;
	}
	
	public ParserRule getSinkRule() {
		return getSinkAccess().getRule();
	}
	
	//Parameter:
	//    (wildcard?='*') | value=ID | (source?='source') origin=[Source|FQN]
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Source:
	//    (input?='input')? 'source' name=EString
	//;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	///**
	// * Defines states that happen in specific situations only
	// */
	//Adaptation:
	//    'adaptation' 'for' situations+=[Situation] (',' situations+=[Situation])* 'at' state=[State]
	//    '{'
	//        states+=State*
	//    '}'
	//;
	public AdaptationElements getAdaptationAccess() {
		return pAdaptation;
	}
	
	public ParserRule getAdaptationRule() {
		return getAdaptationAccess().getRule();
	}
	
	//FQN hidden(): EString('.' EString)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
