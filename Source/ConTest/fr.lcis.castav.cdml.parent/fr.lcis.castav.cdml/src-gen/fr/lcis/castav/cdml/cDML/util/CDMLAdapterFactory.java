/**
 * generated by Xtext 2.29.0
 */
package fr.lcis.castav.cdml.cDML.util;

import fr.lcis.castav.cdml.cDML.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.lcis.castav.cdml.cDML.CDMLPackage
 * @generated
 */
public class CDMLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static CDMLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CDMLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = CDMLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDMLSwitch<Adapter> modelSwitch =
    new CDMLSwitch<Adapter>()
    {
      @Override
      public Adapter caseCdml(Cdml object)
      {
        return createCdmlAdapter();
      }
      @Override
      public Adapter caseContexts(Contexts object)
      {
        return createContextsAdapter();
      }
      @Override
      public Adapter caseContext(Context object)
      {
        return createContextAdapter();
      }
      @Override
      public Adapter caseStaticContexts(StaticContexts object)
      {
        return createStaticContextsAdapter();
      }
      @Override
      public Adapter caseStaticContext(StaticContext object)
      {
        return createStaticContextAdapter();
      }
      @Override
      public Adapter caseSituations(Situations object)
      {
        return createSituationsAdapter();
      }
      @Override
      public Adapter caseSituation(Situation object)
      {
        return createSituationAdapter();
      }
      @Override
      public Adapter caseStatemachine(Statemachine object)
      {
        return createStatemachineAdapter();
      }
      @Override
      public Adapter caseState(State object)
      {
        return createStateAdapter();
      }
      @Override
      public Adapter caseAtomicState(AtomicState object)
      {
        return createAtomicStateAdapter();
      }
      @Override
      public Adapter caseSuperState(SuperState object)
      {
        return createSuperStateAdapter();
      }
      @Override
      public Adapter caseTransition(Transition object)
      {
        return createTransitionAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter casePermission(Permission object)
      {
        return createPermissionAdapter();
      }
      @Override
      public Adapter casePermissionValue(PermissionValue object)
      {
        return createPermissionValueAdapter();
      }
      @Override
      public Adapter caseDataFlow(DataFlow object)
      {
        return createDataFlowAdapter();
      }
      @Override
      public Adapter caseSink(Sink object)
      {
        return createSinkAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseSource(Source object)
      {
        return createSourceAdapter();
      }
      @Override
      public Adapter caseAdaptation(Adaptation object)
      {
        return createAdaptationAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.Cdml <em>Cdml</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.Cdml
   * @generated
   */
  public Adapter createCdmlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.Contexts <em>Contexts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.Contexts
   * @generated
   */
  public Adapter createContextsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.Context <em>Context</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.Context
   * @generated
   */
  public Adapter createContextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.StaticContexts <em>Static Contexts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.StaticContexts
   * @generated
   */
  public Adapter createStaticContextsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.StaticContext <em>Static Context</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.StaticContext
   * @generated
   */
  public Adapter createStaticContextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.Situations <em>Situations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.Situations
   * @generated
   */
  public Adapter createSituationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.Situation <em>Situation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.Situation
   * @generated
   */
  public Adapter createSituationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.Statemachine <em>Statemachine</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.Statemachine
   * @generated
   */
  public Adapter createStatemachineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.State <em>State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.State
   * @generated
   */
  public Adapter createStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.AtomicState <em>Atomic State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.AtomicState
   * @generated
   */
  public Adapter createAtomicStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.SuperState <em>Super State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.SuperState
   * @generated
   */
  public Adapter createSuperStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.Transition <em>Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.Transition
   * @generated
   */
  public Adapter createTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.Permission <em>Permission</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.Permission
   * @generated
   */
  public Adapter createPermissionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.PermissionValue <em>Permission Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.PermissionValue
   * @generated
   */
  public Adapter createPermissionValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.DataFlow <em>Data Flow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.DataFlow
   * @generated
   */
  public Adapter createDataFlowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.Sink <em>Sink</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.Sink
   * @generated
   */
  public Adapter createSinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.Source <em>Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.Source
   * @generated
   */
  public Adapter createSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.lcis.castav.cdml.cDML.Adaptation <em>Adaptation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.lcis.castav.cdml.cDML.Adaptation
   * @generated
   */
  public Adapter createAdaptationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //CDMLAdapterFactory
