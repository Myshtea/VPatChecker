/**
 * generated by Xtext 2.29.0
 */
package fr.lcis.castav.cdml.cDML.impl;

import fr.lcis.castav.cdml.cDML.CDMLPackage;
import fr.lcis.castav.cdml.cDML.Permission;
import fr.lcis.castav.cdml.cDML.PermissionValue;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Permission</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.lcis.castav.cdml.cDML.impl.PermissionImpl#isNormal <em>Normal</em>}</li>
 *   <li>{@link fr.lcis.castav.cdml.cDML.impl.PermissionImpl#getPermissionValues <em>Permission Values</em>}</li>
 *   <li>{@link fr.lcis.castav.cdml.cDML.impl.PermissionImpl#isDangerous <em>Dangerous</em>}</li>
 *   <li>{@link fr.lcis.castav.cdml.cDML.impl.PermissionImpl#isSignature <em>Signature</em>}</li>
 *   <li>{@link fr.lcis.castav.cdml.cDML.impl.PermissionImpl#isSignatureOrSystem <em>Signature Or System</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PermissionImpl extends MinimalEObjectImpl.Container implements Permission
{
  /**
   * The default value of the '{@link #isNormal() <em>Normal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNormal()
   * @generated
   * @ordered
   */
  protected static final boolean NORMAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNormal() <em>Normal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNormal()
   * @generated
   * @ordered
   */
  protected boolean normal = NORMAL_EDEFAULT;

  /**
   * The cached value of the '{@link #getPermissionValues() <em>Permission Values</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPermissionValues()
   * @generated
   * @ordered
   */
  protected EList<PermissionValue> permissionValues;

  /**
   * The default value of the '{@link #isDangerous() <em>Dangerous</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDangerous()
   * @generated
   * @ordered
   */
  protected static final boolean DANGEROUS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDangerous() <em>Dangerous</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDangerous()
   * @generated
   * @ordered
   */
  protected boolean dangerous = DANGEROUS_EDEFAULT;

  /**
   * The default value of the '{@link #isSignature() <em>Signature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSignature()
   * @generated
   * @ordered
   */
  protected static final boolean SIGNATURE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSignature() <em>Signature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSignature()
   * @generated
   * @ordered
   */
  protected boolean signature = SIGNATURE_EDEFAULT;

  /**
   * The default value of the '{@link #isSignatureOrSystem() <em>Signature Or System</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSignatureOrSystem()
   * @generated
   * @ordered
   */
  protected static final boolean SIGNATURE_OR_SYSTEM_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSignatureOrSystem() <em>Signature Or System</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSignatureOrSystem()
   * @generated
   * @ordered
   */
  protected boolean signatureOrSystem = SIGNATURE_OR_SYSTEM_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PermissionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CDMLPackage.Literals.PERMISSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNormal()
  {
    return normal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNormal(boolean newNormal)
  {
    boolean oldNormal = normal;
    normal = newNormal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CDMLPackage.PERMISSION__NORMAL, oldNormal, normal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PermissionValue> getPermissionValues()
  {
    if (permissionValues == null)
    {
      permissionValues = new EObjectContainmentEList<PermissionValue>(PermissionValue.class, this, CDMLPackage.PERMISSION__PERMISSION_VALUES);
    }
    return permissionValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDangerous()
  {
    return dangerous;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDangerous(boolean newDangerous)
  {
    boolean oldDangerous = dangerous;
    dangerous = newDangerous;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CDMLPackage.PERMISSION__DANGEROUS, oldDangerous, dangerous));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSignature()
  {
    return signature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSignature(boolean newSignature)
  {
    boolean oldSignature = signature;
    signature = newSignature;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CDMLPackage.PERMISSION__SIGNATURE, oldSignature, signature));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSignatureOrSystem()
  {
    return signatureOrSystem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSignatureOrSystem(boolean newSignatureOrSystem)
  {
    boolean oldSignatureOrSystem = signatureOrSystem;
    signatureOrSystem = newSignatureOrSystem;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CDMLPackage.PERMISSION__SIGNATURE_OR_SYSTEM, oldSignatureOrSystem, signatureOrSystem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CDMLPackage.PERMISSION__PERMISSION_VALUES:
        return ((InternalEList<?>)getPermissionValues()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CDMLPackage.PERMISSION__NORMAL:
        return isNormal();
      case CDMLPackage.PERMISSION__PERMISSION_VALUES:
        return getPermissionValues();
      case CDMLPackage.PERMISSION__DANGEROUS:
        return isDangerous();
      case CDMLPackage.PERMISSION__SIGNATURE:
        return isSignature();
      case CDMLPackage.PERMISSION__SIGNATURE_OR_SYSTEM:
        return isSignatureOrSystem();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CDMLPackage.PERMISSION__NORMAL:
        setNormal((Boolean)newValue);
        return;
      case CDMLPackage.PERMISSION__PERMISSION_VALUES:
        getPermissionValues().clear();
        getPermissionValues().addAll((Collection<? extends PermissionValue>)newValue);
        return;
      case CDMLPackage.PERMISSION__DANGEROUS:
        setDangerous((Boolean)newValue);
        return;
      case CDMLPackage.PERMISSION__SIGNATURE:
        setSignature((Boolean)newValue);
        return;
      case CDMLPackage.PERMISSION__SIGNATURE_OR_SYSTEM:
        setSignatureOrSystem((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CDMLPackage.PERMISSION__NORMAL:
        setNormal(NORMAL_EDEFAULT);
        return;
      case CDMLPackage.PERMISSION__PERMISSION_VALUES:
        getPermissionValues().clear();
        return;
      case CDMLPackage.PERMISSION__DANGEROUS:
        setDangerous(DANGEROUS_EDEFAULT);
        return;
      case CDMLPackage.PERMISSION__SIGNATURE:
        setSignature(SIGNATURE_EDEFAULT);
        return;
      case CDMLPackage.PERMISSION__SIGNATURE_OR_SYSTEM:
        setSignatureOrSystem(SIGNATURE_OR_SYSTEM_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CDMLPackage.PERMISSION__NORMAL:
        return normal != NORMAL_EDEFAULT;
      case CDMLPackage.PERMISSION__PERMISSION_VALUES:
        return permissionValues != null && !permissionValues.isEmpty();
      case CDMLPackage.PERMISSION__DANGEROUS:
        return dangerous != DANGEROUS_EDEFAULT;
      case CDMLPackage.PERMISSION__SIGNATURE:
        return signature != SIGNATURE_EDEFAULT;
      case CDMLPackage.PERMISSION__SIGNATURE_OR_SYSTEM:
        return signatureOrSystem != SIGNATURE_OR_SYSTEM_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (normal: ");
    result.append(normal);
    result.append(", dangerous: ");
    result.append(dangerous);
    result.append(", signature: ");
    result.append(signature);
    result.append(", signatureOrSystem: ");
    result.append(signatureOrSystem);
    result.append(')');
    return result.toString();
  }

} //PermissionImpl
