/**
 * generated by Xtext 2.29.0
 */
package fr.lcis.castav.cdml.cDML.impl;

import fr.lcis.castav.cdml.cDML.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CDMLFactoryImpl extends EFactoryImpl implements CDMLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CDMLFactory init()
  {
    try
    {
      CDMLFactory theCDMLFactory = (CDMLFactory)EPackage.Registry.INSTANCE.getEFactory(CDMLPackage.eNS_URI);
      if (theCDMLFactory != null)
      {
        return theCDMLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CDMLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CDMLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CDMLPackage.CDML: return createCdml();
      case CDMLPackage.CONTEXTS: return createContexts();
      case CDMLPackage.CONTEXT: return createContext();
      case CDMLPackage.STATIC_CONTEXTS: return createStaticContexts();
      case CDMLPackage.STATIC_CONTEXT: return createStaticContext();
      case CDMLPackage.SITUATIONS: return createSituations();
      case CDMLPackage.SITUATION: return createSituation();
      case CDMLPackage.STATEMACHINE: return createStatemachine();
      case CDMLPackage.STATE: return createState();
      case CDMLPackage.ATOMIC_STATE: return createAtomicState();
      case CDMLPackage.SUPER_STATE: return createSuperState();
      case CDMLPackage.TRANSITION: return createTransition();
      case CDMLPackage.EVENT: return createEvent();
      case CDMLPackage.PERMISSION: return createPermission();
      case CDMLPackage.PERMISSION_VALUE: return createPermissionValue();
      case CDMLPackage.DATA_FLOW: return createDataFlow();
      case CDMLPackage.SINK: return createSink();
      case CDMLPackage.PARAMETER: return createParameter();
      case CDMLPackage.SOURCE: return createSource();
      case CDMLPackage.ADAPTATION: return createAdaptation();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cdml createCdml()
  {
    CdmlImpl cdml = new CdmlImpl();
    return cdml;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contexts createContexts()
  {
    ContextsImpl contexts = new ContextsImpl();
    return contexts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Context createContext()
  {
    ContextImpl context = new ContextImpl();
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StaticContexts createStaticContexts()
  {
    StaticContextsImpl staticContexts = new StaticContextsImpl();
    return staticContexts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StaticContext createStaticContext()
  {
    StaticContextImpl staticContext = new StaticContextImpl();
    return staticContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Situations createSituations()
  {
    SituationsImpl situations = new SituationsImpl();
    return situations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Situation createSituation()
  {
    SituationImpl situation = new SituationImpl();
    return situation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statemachine createStatemachine()
  {
    StatemachineImpl statemachine = new StatemachineImpl();
    return statemachine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public State createState()
  {
    StateImpl state = new StateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AtomicState createAtomicState()
  {
    AtomicStateImpl atomicState = new AtomicStateImpl();
    return atomicState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SuperState createSuperState()
  {
    SuperStateImpl superState = new SuperStateImpl();
    return superState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transition createTransition()
  {
    TransitionImpl transition = new TransitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Permission createPermission()
  {
    PermissionImpl permission = new PermissionImpl();
    return permission;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PermissionValue createPermissionValue()
  {
    PermissionValueImpl permissionValue = new PermissionValueImpl();
    return permissionValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataFlow createDataFlow()
  {
    DataFlowImpl dataFlow = new DataFlowImpl();
    return dataFlow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sink createSink()
  {
    SinkImpl sink = new SinkImpl();
    return sink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Source createSource()
  {
    SourceImpl source = new SourceImpl();
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adaptation createAdaptation()
  {
    AdaptationImpl adaptation = new AdaptationImpl();
    return adaptation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CDMLPackage getCDMLPackage()
  {
    return (CDMLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CDMLPackage getPackage()
  {
    return CDMLPackage.eINSTANCE;
  }

} //CDMLFactoryImpl
