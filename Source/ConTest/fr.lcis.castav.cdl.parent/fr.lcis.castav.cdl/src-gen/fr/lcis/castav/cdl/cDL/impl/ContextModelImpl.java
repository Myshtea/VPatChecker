/**
 * generated by Xtext 2.29.0
 */
package fr.lcis.castav.cdl.cDL.impl;

import fr.lcis.castav.cdl.cDL.CDLPackage;
import fr.lcis.castav.cdl.cDL.Context;
import fr.lcis.castav.cdl.cDL.ContextModel;
import fr.lcis.castav.cdl.cDL.DefinedType;
import fr.lcis.castav.cdl.cDL.Providers;
import fr.lcis.castav.cdl.cDL.Situation;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Context Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.lcis.castav.cdl.cDL.impl.ContextModelImpl#getName <em>Name</em>}</li>
 *   <li>{@link fr.lcis.castav.cdl.cDL.impl.ContextModelImpl#getContexts <em>Contexts</em>}</li>
 *   <li>{@link fr.lcis.castav.cdl.cDL.impl.ContextModelImpl#getProviders <em>Providers</em>}</li>
 *   <li>{@link fr.lcis.castav.cdl.cDL.impl.ContextModelImpl#getSituations <em>Situations</em>}</li>
 *   <li>{@link fr.lcis.castav.cdl.cDL.impl.ContextModelImpl#getTypes <em>Types</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ContextModelImpl extends MinimalEObjectImpl.Container implements ContextModel
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getContexts() <em>Contexts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContexts()
   * @generated
   * @ordered
   */
  protected EList<Context> contexts;

  /**
   * The cached value of the '{@link #getProviders() <em>Providers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProviders()
   * @generated
   * @ordered
   */
  protected EList<Providers> providers;

  /**
   * The cached value of the '{@link #getSituations() <em>Situations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSituations()
   * @generated
   * @ordered
   */
  protected EList<Situation> situations;

  /**
   * The cached value of the '{@link #getTypes() <em>Types</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypes()
   * @generated
   * @ordered
   */
  protected EList<DefinedType> types;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CDLPackage.Literals.CONTEXT_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CDLPackage.CONTEXT_MODEL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Context> getContexts()
  {
    if (contexts == null)
    {
      contexts = new EObjectContainmentEList<Context>(Context.class, this, CDLPackage.CONTEXT_MODEL__CONTEXTS);
    }
    return contexts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Providers> getProviders()
  {
    if (providers == null)
    {
      providers = new EObjectContainmentEList<Providers>(Providers.class, this, CDLPackage.CONTEXT_MODEL__PROVIDERS);
    }
    return providers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Situation> getSituations()
  {
    if (situations == null)
    {
      situations = new EObjectContainmentEList<Situation>(Situation.class, this, CDLPackage.CONTEXT_MODEL__SITUATIONS);
    }
    return situations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DefinedType> getTypes()
  {
    if (types == null)
    {
      types = new EObjectContainmentEList<DefinedType>(DefinedType.class, this, CDLPackage.CONTEXT_MODEL__TYPES);
    }
    return types;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CDLPackage.CONTEXT_MODEL__CONTEXTS:
        return ((InternalEList<?>)getContexts()).basicRemove(otherEnd, msgs);
      case CDLPackage.CONTEXT_MODEL__PROVIDERS:
        return ((InternalEList<?>)getProviders()).basicRemove(otherEnd, msgs);
      case CDLPackage.CONTEXT_MODEL__SITUATIONS:
        return ((InternalEList<?>)getSituations()).basicRemove(otherEnd, msgs);
      case CDLPackage.CONTEXT_MODEL__TYPES:
        return ((InternalEList<?>)getTypes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CDLPackage.CONTEXT_MODEL__NAME:
        return getName();
      case CDLPackage.CONTEXT_MODEL__CONTEXTS:
        return getContexts();
      case CDLPackage.CONTEXT_MODEL__PROVIDERS:
        return getProviders();
      case CDLPackage.CONTEXT_MODEL__SITUATIONS:
        return getSituations();
      case CDLPackage.CONTEXT_MODEL__TYPES:
        return getTypes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CDLPackage.CONTEXT_MODEL__NAME:
        setName((String)newValue);
        return;
      case CDLPackage.CONTEXT_MODEL__CONTEXTS:
        getContexts().clear();
        getContexts().addAll((Collection<? extends Context>)newValue);
        return;
      case CDLPackage.CONTEXT_MODEL__PROVIDERS:
        getProviders().clear();
        getProviders().addAll((Collection<? extends Providers>)newValue);
        return;
      case CDLPackage.CONTEXT_MODEL__SITUATIONS:
        getSituations().clear();
        getSituations().addAll((Collection<? extends Situation>)newValue);
        return;
      case CDLPackage.CONTEXT_MODEL__TYPES:
        getTypes().clear();
        getTypes().addAll((Collection<? extends DefinedType>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CDLPackage.CONTEXT_MODEL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case CDLPackage.CONTEXT_MODEL__CONTEXTS:
        getContexts().clear();
        return;
      case CDLPackage.CONTEXT_MODEL__PROVIDERS:
        getProviders().clear();
        return;
      case CDLPackage.CONTEXT_MODEL__SITUATIONS:
        getSituations().clear();
        return;
      case CDLPackage.CONTEXT_MODEL__TYPES:
        getTypes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CDLPackage.CONTEXT_MODEL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case CDLPackage.CONTEXT_MODEL__CONTEXTS:
        return contexts != null && !contexts.isEmpty();
      case CDLPackage.CONTEXT_MODEL__PROVIDERS:
        return providers != null && !providers.isEmpty();
      case CDLPackage.CONTEXT_MODEL__SITUATIONS:
        return situations != null && !situations.isEmpty();
      case CDLPackage.CONTEXT_MODEL__TYPES:
        return types != null && !types.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ContextModelImpl
