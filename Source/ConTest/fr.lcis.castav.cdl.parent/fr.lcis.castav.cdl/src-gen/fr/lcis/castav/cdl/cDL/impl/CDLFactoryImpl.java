/**
 * generated by Xtext 2.29.0
 */
package fr.lcis.castav.cdl.cDL.impl;

import fr.lcis.castav.cdl.cDL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CDLFactoryImpl extends EFactoryImpl implements CDLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CDLFactory init()
  {
    try
    {
      CDLFactory theCDLFactory = (CDLFactory)EPackage.Registry.INSTANCE.getEFactory(CDLPackage.eNS_URI);
      if (theCDLFactory != null)
      {
        return theCDLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CDLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CDLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CDLPackage.CONTEXT_MODEL: return createContextModel();
      case CDLPackage.CONTEXT: return createContext();
      case CDLPackage.CONTEXT_MAPPING: return createContextMapping();
      case CDLPackage.PROVIDERS: return createProviders();
      case CDLPackage.PROVIDER: return createProvider();
      case CDLPackage.PROPERTY: return createProperty();
      case CDLPackage.TYPE_REF: return createTypeRef();
      case CDLPackage.DEFINED_TYPE: return createDefinedType();
      case CDLPackage.CONTEXT_VALUE: return createContextValue();
      case CDLPackage.SIMPLE_TYPE: return createSimpleType();
      case CDLPackage.STRING_TYPE: return createStringType();
      case CDLPackage.INTEGER_TYPE: return createIntegerType();
      case CDLPackage.BOOLEAN_TYPE: return createBooleanType();
      case CDLPackage.DOUBLE_TYPE: return createDoubleType();
      case CDLPackage.SITUATION: return createSituation();
      case CDLPackage.CONTEXT_EXPRESSION: return createContextExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextModel createContextModel()
  {
    ContextModelImpl contextModel = new ContextModelImpl();
    return contextModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Context createContext()
  {
    ContextImpl context = new ContextImpl();
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextMapping createContextMapping()
  {
    ContextMappingImpl contextMapping = new ContextMappingImpl();
    return contextMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Providers createProviders()
  {
    ProvidersImpl providers = new ProvidersImpl();
    return providers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Provider createProvider()
  {
    ProviderImpl provider = new ProviderImpl();
    return provider;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeRef createTypeRef()
  {
    TypeRefImpl typeRef = new TypeRefImpl();
    return typeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefinedType createDefinedType()
  {
    DefinedTypeImpl definedType = new DefinedTypeImpl();
    return definedType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextValue createContextValue()
  {
    ContextValueImpl contextValue = new ContextValueImpl();
    return contextValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleType createSimpleType()
  {
    SimpleTypeImpl simpleType = new SimpleTypeImpl();
    return simpleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringType createStringType()
  {
    StringTypeImpl stringType = new StringTypeImpl();
    return stringType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegerType createIntegerType()
  {
    IntegerTypeImpl integerType = new IntegerTypeImpl();
    return integerType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanType createBooleanType()
  {
    BooleanTypeImpl booleanType = new BooleanTypeImpl();
    return booleanType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleType createDoubleType()
  {
    DoubleTypeImpl doubleType = new DoubleTypeImpl();
    return doubleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Situation createSituation()
  {
    SituationImpl situation = new SituationImpl();
    return situation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextExpression createContextExpression()
  {
    ContextExpressionImpl contextExpression = new ContextExpressionImpl();
    return contextExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CDLPackage getCDLPackage()
  {
    return (CDLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CDLPackage getPackage()
  {
    return CDLPackage.eINSTANCE;
  }

} //CDLFactoryImpl
