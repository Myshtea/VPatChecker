/*
 * generated by Xtext 2.29.0
 */
package fr.lcis.castav.cdl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CDLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ContextModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.ContextModel");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cContextModelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cContextsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cContextsContextParserRuleCall_0_3_0 = (RuleCall)cContextsAssignment_0_3.eContents().get(0);
		private final Assignment cProvidersAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cProvidersProvidersParserRuleCall_1_0 = (RuleCall)cProvidersAssignment_1.eContents().get(0);
		private final Assignment cSituationsAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cSituationsSituationParserRuleCall_2_0 = (RuleCall)cSituationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Assignment cTypesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTypesDefinedTypeParserRuleCall_3_0_0 = (RuleCall)cTypesAssignment_3_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//ContextModel:
		//    "contextModel" name=ID '{'
		//        Contexts+=Context* &
		//        Providers+=Providers* &
		//        Situations+=Situation* &
		//        Types+=DefinedType*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"contextModel" name=ID '{'
		//    Contexts+=Context* &
		//    Providers+=Providers* &
		//    Situations+=Situation* &
		//    Types+=DefinedType*
		//'}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//"contextModel" name=ID '{'
		//    Contexts+=Context*
		public Group getGroup_0() { return cGroup_0; }
		
		//"contextModel"
		public Keyword getContextModelKeyword_0_0() { return cContextModelKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//Contexts+=Context*
		public Assignment getContextsAssignment_0_3() { return cContextsAssignment_0_3; }
		
		//Context
		public RuleCall getContextsContextParserRuleCall_0_3_0() { return cContextsContextParserRuleCall_0_3_0; }
		
		//Providers+=Providers*
		public Assignment getProvidersAssignment_1() { return cProvidersAssignment_1; }
		
		//Providers
		public RuleCall getProvidersProvidersParserRuleCall_1_0() { return cProvidersProvidersParserRuleCall_1_0; }
		
		//Situations+=Situation*
		public Assignment getSituationsAssignment_2() { return cSituationsAssignment_2; }
		
		//Situation
		public RuleCall getSituationsSituationParserRuleCall_2_0() { return cSituationsSituationParserRuleCall_2_0; }
		
		//    Types+=DefinedType*
		//'}'
		public Group getGroup_3() { return cGroup_3; }
		
		//Types+=DefinedType*
		public Assignment getTypesAssignment_3_0() { return cTypesAssignment_3_0; }
		
		//DefinedType
		public RuleCall getTypesDefinedTypeParserRuleCall_3_0_0() { return cTypesDefinedTypeParserRuleCall_3_0_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_1() { return cRightCurlyBracketKeyword_3_1; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticAssignment_0.eContents().get(0);
		private final Keyword cContextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDerivedAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cDerivedDerivesKeyword_3_0_0 = (Keyword)cDerivedAssignment_3_0.eContents().get(0);
		private final Assignment cDerivesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cDerivesContextCrossReference_3_1_0 = (CrossReference)cDerivesAssignment_3_1.eContents().get(0);
		private final RuleCall cDerivesContextIDTerminalRuleCall_3_1_0_1 = (RuleCall)cDerivesContextCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDerivesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cDerivesContextCrossReference_3_2_1_0 = (CrossReference)cDerivesAssignment_3_2_1.eContents().get(0);
		private final RuleCall cDerivesContextIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cDerivesContextCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cProvidersKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cProvidersAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final CrossReference cProvidersProviderCrossReference_5_3_0 = (CrossReference)cProvidersAssignment_5_3.eContents().get(0);
		private final RuleCall cProvidersProviderIDTerminalRuleCall_5_3_0_1 = (RuleCall)cProvidersProviderCrossReference_5_3_0.eContents().get(1);
		private final Group cGroup_5_4 = (Group)cGroup_5.eContents().get(4);
		private final Keyword cCommaKeyword_5_4_0 = (Keyword)cGroup_5_4.eContents().get(0);
		private final Assignment cProvidersAssignment_5_4_1 = (Assignment)cGroup_5_4.eContents().get(1);
		private final CrossReference cProvidersProviderCrossReference_5_4_1_0 = (CrossReference)cProvidersAssignment_5_4_1.eContents().get(0);
		private final RuleCall cProvidersProviderIDTerminalRuleCall_5_4_1_0_1 = (RuleCall)cProvidersProviderCrossReference_5_4_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Keyword cCommaKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Keyword cPropertiesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPropertiesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPropertiesPropertyParserRuleCall_9_0 = (RuleCall)cPropertiesAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cPropertiesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_10_1_0 = (RuleCall)cPropertiesAssignment_10_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cMappingsKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Keyword cColonKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Assignment cMappingsAssignment_12_4 = (Assignment)cGroup_12.eContents().get(4);
		private final RuleCall cMappingsContextMappingParserRuleCall_12_4_0 = (RuleCall)cMappingsAssignment_12_4.eContents().get(0);
		private final Group cGroup_12_5 = (Group)cGroup_12.eContents().get(5);
		private final Keyword cCommaKeyword_12_5_0 = (Keyword)cGroup_12_5.eContents().get(0);
		private final Assignment cMappingsAssignment_12_5_1 = (Assignment)cGroup_12_5.eContents().get(1);
		private final RuleCall cMappingsContextMappingParserRuleCall_12_5_1_0 = (RuleCall)cMappingsAssignment_12_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12_6 = (Keyword)cGroup_12.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Context:
		//    (static?='static')? 'context' name=ID (derived?='derives' derives+=[Context] (',' derives+=[Context] )*)? '{'
		//        ('providers' ':' '[' providers+=[Provider] (',' providers+=[Provider])* ']' ',')?
		//        'properties' ':' '[' properties+=Property (',' properties+=Property)* ']'
		//        (',' ('mappings') ':' '{'
		//             mappings+=ContextMapping (',' mappings+=ContextMapping)*
		//        '}')?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(static?='static')? 'context' name=ID (derived?='derives' derives+=[Context] (',' derives+=[Context] )*)? '{'
		//    ('providers' ':' '[' providers+=[Provider] (',' providers+=[Provider])* ']' ',')?
		//    'properties' ':' '[' properties+=Property (',' properties+=Property)* ']'
		//    (',' ('mappings') ':' '{'
		//         mappings+=ContextMapping (',' mappings+=ContextMapping)*
		//    '}')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(static?='static')?
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }
		
		//'static'
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }
		
		//'context'
		public Keyword getContextKeyword_1() { return cContextKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(derived?='derives' derives+=[Context] (',' derives+=[Context] )*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//derived?='derives'
		public Assignment getDerivedAssignment_3_0() { return cDerivedAssignment_3_0; }
		
		//'derives'
		public Keyword getDerivedDerivesKeyword_3_0_0() { return cDerivedDerivesKeyword_3_0_0; }
		
		//derives+=[Context]
		public Assignment getDerivesAssignment_3_1() { return cDerivesAssignment_3_1; }
		
		//[Context]
		public CrossReference getDerivesContextCrossReference_3_1_0() { return cDerivesContextCrossReference_3_1_0; }
		
		//ID
		public RuleCall getDerivesContextIDTerminalRuleCall_3_1_0_1() { return cDerivesContextIDTerminalRuleCall_3_1_0_1; }
		
		//(',' derives+=[Context] )*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//derives+=[Context]
		public Assignment getDerivesAssignment_3_2_1() { return cDerivesAssignment_3_2_1; }
		
		//[Context]
		public CrossReference getDerivesContextCrossReference_3_2_1_0() { return cDerivesContextCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getDerivesContextIDTerminalRuleCall_3_2_1_0_1() { return cDerivesContextIDTerminalRuleCall_3_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('providers' ':' '[' providers+=[Provider] (',' providers+=[Provider])* ']' ',')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'providers'
		public Keyword getProvidersKeyword_5_0() { return cProvidersKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_2() { return cLeftSquareBracketKeyword_5_2; }
		
		//providers+=[Provider]
		public Assignment getProvidersAssignment_5_3() { return cProvidersAssignment_5_3; }
		
		//[Provider]
		public CrossReference getProvidersProviderCrossReference_5_3_0() { return cProvidersProviderCrossReference_5_3_0; }
		
		//ID
		public RuleCall getProvidersProviderIDTerminalRuleCall_5_3_0_1() { return cProvidersProviderIDTerminalRuleCall_5_3_0_1; }
		
		//(',' providers+=[Provider])*
		public Group getGroup_5_4() { return cGroup_5_4; }
		
		//','
		public Keyword getCommaKeyword_5_4_0() { return cCommaKeyword_5_4_0; }
		
		//providers+=[Provider]
		public Assignment getProvidersAssignment_5_4_1() { return cProvidersAssignment_5_4_1; }
		
		//[Provider]
		public CrossReference getProvidersProviderCrossReference_5_4_1_0() { return cProvidersProviderCrossReference_5_4_1_0; }
		
		//ID
		public RuleCall getProvidersProviderIDTerminalRuleCall_5_4_1_0_1() { return cProvidersProviderIDTerminalRuleCall_5_4_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_5() { return cRightSquareBracketKeyword_5_5; }
		
		//','
		public Keyword getCommaKeyword_5_6() { return cCommaKeyword_5_6; }
		
		//'properties'
		public Keyword getPropertiesKeyword_6() { return cPropertiesKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8() { return cLeftSquareBracketKeyword_8; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_9() { return cPropertiesAssignment_9; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_9_0() { return cPropertiesPropertyParserRuleCall_9_0; }
		
		//(',' properties+=Property)*
		public Group getGroup_10() { return cGroup_10; }
		
		//','
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_10_1() { return cPropertiesAssignment_10_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_10_1_0() { return cPropertiesPropertyParserRuleCall_10_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }
		
		//(',' ('mappings') ':' '{'
		//     mappings+=ContextMapping (',' mappings+=ContextMapping)*
		//'}')?
		public Group getGroup_12() { return cGroup_12; }
		
		//','
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }
		
		//('mappings')
		public Keyword getMappingsKeyword_12_1() { return cMappingsKeyword_12_1; }
		
		//':'
		public Keyword getColonKeyword_12_2() { return cColonKeyword_12_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_12_3() { return cLeftCurlyBracketKeyword_12_3; }
		
		//mappings+=ContextMapping
		public Assignment getMappingsAssignment_12_4() { return cMappingsAssignment_12_4; }
		
		//ContextMapping
		public RuleCall getMappingsContextMappingParserRuleCall_12_4_0() { return cMappingsContextMappingParserRuleCall_12_4_0; }
		
		//(',' mappings+=ContextMapping)*
		public Group getGroup_12_5() { return cGroup_12_5; }
		
		//','
		public Keyword getCommaKeyword_12_5_0() { return cCommaKeyword_12_5_0; }
		
		//mappings+=ContextMapping
		public Assignment getMappingsAssignment_12_5_1() { return cMappingsAssignment_12_5_1; }
		
		//ContextMapping
		public RuleCall getMappingsContextMappingParserRuleCall_12_5_1_0() { return cMappingsContextMappingParserRuleCall_12_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12_6() { return cRightCurlyBracketKeyword_12_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class ContextMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.ContextMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefContextValueCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefContextValueFQNParserRuleCall_0_0_1 = (RuleCall)cRefContextValueCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionContextExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ContextMapping:
		//    ref=[ContextValue|FQN] '->' expression=ContextExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[ContextValue|FQN] '->' expression=ContextExpression
		public Group getGroup() { return cGroup; }
		
		//ref=[ContextValue|FQN]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[ContextValue|FQN]
		public CrossReference getRefContextValueCrossReference_0_0() { return cRefContextValueCrossReference_0_0; }
		
		//FQN
		public RuleCall getRefContextValueFQNParserRuleCall_0_0_1() { return cRefContextValueFQNParserRuleCall_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//expression=ContextExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//ContextExpression
		public RuleCall getExpressionContextExpressionParserRuleCall_2_0() { return cExpressionContextExpressionParserRuleCall_2_0; }
	}
	public class ProvidersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.Providers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProvidersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProvidersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProvidersProviderParserRuleCall_2_0 = (RuleCall)cProvidersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cProvidersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cProvidersProviderParserRuleCall_3_1_0 = (RuleCall)cProvidersAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Providers: 'providers' '{'
		//        providers+=Provider (',' providers+=Provider)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'providers' '{'
		//       providers+=Provider (',' providers+=Provider)*
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//'providers'
		public Keyword getProvidersKeyword_0() { return cProvidersKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//providers+=Provider
		public Assignment getProvidersAssignment_2() { return cProvidersAssignment_2; }
		
		//Provider
		public RuleCall getProvidersProviderParserRuleCall_2_0() { return cProvidersProviderParserRuleCall_2_0; }
		
		//(',' providers+=Provider)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//providers+=Provider
		public Assignment getProvidersAssignment_3_1() { return cProvidersAssignment_3_1; }
		
		//Provider
		public RuleCall getProvidersProviderParserRuleCall_3_1_0() { return cProvidersProviderParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.Provider");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Provider:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeRefParserRuleCall_2_0_0 = (RuleCall)cTypeAlternatives_2_0.eContents().get(0);
		private final RuleCall cTypeSimpleTypeParserRuleCall_2_0_1 = (RuleCall)cTypeAlternatives_2_0.eContents().get(1);
		
		//Property:
		//    name=ID ':' type=(TypeRef|SimpleType)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=(TypeRef|SimpleType)
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=(TypeRef|SimpleType)
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//(TypeRef|SimpleType)
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_2_0_0() { return cTypeTypeRefParserRuleCall_2_0_0; }
		
		//SimpleType
		public RuleCall getTypeSimpleTypeParserRuleCall_2_0_1() { return cTypeSimpleTypeParserRuleCall_2_0_1; }
	}
	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.TypeRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefDefinedTypeCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefDefinedTypeIDTerminalRuleCall_0_1 = (RuleCall)cRefDefinedTypeCrossReference_0.eContents().get(1);
		
		//TypeRef:
		//    ref=[DefinedType|ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[DefinedType|ID]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[DefinedType|ID]
		public CrossReference getRefDefinedTypeCrossReference_0() { return cRefDefinedTypeCrossReference_0; }
		
		//ID
		public RuleCall getRefDefinedTypeIDTerminalRuleCall_0_1() { return cRefDefinedTypeIDTerminalRuleCall_0_1; }
	}
	public class DefinedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.DefinedType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesContextValueParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesContextValueParserRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DefinedType:
		//    'type' name=ID '{'
		//        values+=ContextValue (',' values+=ContextValue)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ID '{'
		//    values+=ContextValue (',' values+=ContextValue)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//values+=ContextValue
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//ContextValue
		public RuleCall getValuesContextValueParserRuleCall_3_0() { return cValuesContextValueParserRuleCall_3_0; }
		
		//(',' values+=ContextValue)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//values+=ContextValue
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }
		
		//ContextValue
		public RuleCall getValuesContextValueParserRuleCall_4_1_0() { return cValuesContextValueParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ContextValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.ContextValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		
		//ContextValue:
		//    name=(STRING | ID)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=(STRING | ID)
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//(STRING | ID)
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1() { return cNameIDTerminalRuleCall_0_1; }
	}
	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.SimpleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDoubleTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SimpleType:
		//    StringType | IntegerType | BooleanType | DoubleType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StringType | IntegerType | BooleanType | DoubleType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_0() { return cStringTypeParserRuleCall_0; }
		
		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_1() { return cIntegerTypeParserRuleCall_1; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_2() { return cBooleanTypeParserRuleCall_2; }
		
		//DoubleType
		public RuleCall getDoubleTypeParserRuleCall_3() { return cDoubleTypeParserRuleCall_3; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringType:
		//    {StringType} "string"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} "string"
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.IntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntegerType:
		//    {IntegerType} "integer"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType} "integer"
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//"integer"
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanType:
		//    {BooleanType} "boolean"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanType} "boolean"
		public Group getGroup() { return cGroup; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }
		
		//"boolean"
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
	}
	public class DoubleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.DoubleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DoubleType:
		//    {DoubleType} "double"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{DoubleType} "double"
		public Group getGroup() { return cGroup; }
		
		//{DoubleType}
		public Action getDoubleTypeAction_0() { return cDoubleTypeAction_0; }
		
		//"double"
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
	}
	public class SituationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.Situation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSituationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionContextExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Situation:
		//    'situation' name=ID '{'
		//        expression+=ContextExpression
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'situation' name=ID '{'
		//    expression+=ContextExpression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'situation'
		public Keyword getSituationKeyword_0() { return cSituationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//expression+=ContextExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//ContextExpression
		public RuleCall getExpressionContextExpressionParserRuleCall_3_0() { return cExpressionContextExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ContextExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.ContextExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefPropertyCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefPropertyFQNParserRuleCall_0_0_1 = (RuleCall)cRefPropertyCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueContextValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cAndKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cOrKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Assignment cExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExprContextExpressionParserRuleCall_3_1_0 = (RuleCall)cExprAssignment_3_1.eContents().get(0);
		
		//ContextExpression:
		//    ref=[Property|FQN] ('<' | '>' | '>=' | '<=' | '==' | '!=') value=ContextValue (('and' | 'or') expr=ContextExpression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Property|FQN] ('<' | '>' | '>=' | '<=' | '==' | '!=') value=ContextValue (('and' | 'or') expr=ContextExpression)?
		public Group getGroup() { return cGroup; }
		
		//ref=[Property|FQN]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[Property|FQN]
		public CrossReference getRefPropertyCrossReference_0_0() { return cRefPropertyCrossReference_0_0; }
		
		//FQN
		public RuleCall getRefPropertyFQNParserRuleCall_0_0_1() { return cRefPropertyFQNParserRuleCall_0_0_1; }
		
		//('<' | '>' | '>=' | '<=' | '==' | '!=')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_1() { return cGreaterThanSignKeyword_1_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_2() { return cGreaterThanSignEqualsSignKeyword_1_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_3() { return cLessThanSignEqualsSignKeyword_1_3; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_4() { return cEqualsSignEqualsSignKeyword_1_4; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_5() { return cExclamationMarkEqualsSignKeyword_1_5; }
		
		//value=ContextValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ContextValue
		public RuleCall getValueContextValueParserRuleCall_2_0() { return cValueContextValueParserRuleCall_2_0; }
		
		//(('and' | 'or') expr=ContextExpression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//('and' | 'or')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'and'
		public Keyword getAndKeyword_3_0_0() { return cAndKeyword_3_0_0; }
		
		//'or'
		public Keyword getOrKeyword_3_0_1() { return cOrKeyword_3_0_1; }
		
		//expr=ContextExpression
		public Assignment getExprAssignment_3_1() { return cExprAssignment_3_1; }
		
		//ContextExpression
		public RuleCall getExprContextExpressionParserRuleCall_3_1_0() { return cExprContextExpressionParserRuleCall_3_1_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.lcis.castav.cdl.CDL.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN hidden(): ID('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ContextModelElements pContextModel;
	private final ContextElements pContext;
	private final ContextMappingElements pContextMapping;
	private final ProvidersElements pProviders;
	private final ProviderElements pProvider;
	private final PropertyElements pProperty;
	private final TypeRefElements pTypeRef;
	private final DefinedTypeElements pDefinedType;
	private final ContextValueElements pContextValue;
	private final SimpleTypeElements pSimpleType;
	private final StringTypeElements pStringType;
	private final IntegerTypeElements pIntegerType;
	private final BooleanTypeElements pBooleanType;
	private final DoubleTypeElements pDoubleType;
	private final SituationElements pSituation;
	private final ContextExpressionElements pContextExpression;
	private final FQNElements pFQN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pContextModel = new ContextModelElements();
		this.pContext = new ContextElements();
		this.pContextMapping = new ContextMappingElements();
		this.pProviders = new ProvidersElements();
		this.pProvider = new ProviderElements();
		this.pProperty = new PropertyElements();
		this.pTypeRef = new TypeRefElements();
		this.pDefinedType = new DefinedTypeElements();
		this.pContextValue = new ContextValueElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pStringType = new StringTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pDoubleType = new DoubleTypeElements();
		this.pSituation = new SituationElements();
		this.pContextExpression = new ContextExpressionElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.lcis.castav.cdl.CDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ContextModel:
	//    "contextModel" name=ID '{'
	//        Contexts+=Context* &
	//        Providers+=Providers* &
	//        Situations+=Situation* &
	//        Types+=DefinedType*
	//    '}'
	//;
	public ContextModelElements getContextModelAccess() {
		return pContextModel;
	}
	
	public ParserRule getContextModelRule() {
		return getContextModelAccess().getRule();
	}
	
	//Context:
	//    (static?='static')? 'context' name=ID (derived?='derives' derives+=[Context] (',' derives+=[Context] )*)? '{'
	//        ('providers' ':' '[' providers+=[Provider] (',' providers+=[Provider])* ']' ',')?
	//        'properties' ':' '[' properties+=Property (',' properties+=Property)* ']'
	//        (',' ('mappings') ':' '{'
	//             mappings+=ContextMapping (',' mappings+=ContextMapping)*
	//        '}')?
	//    '}'
	//;
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//ContextMapping:
	//    ref=[ContextValue|FQN] '->' expression=ContextExpression
	//;
	public ContextMappingElements getContextMappingAccess() {
		return pContextMapping;
	}
	
	public ParserRule getContextMappingRule() {
		return getContextMappingAccess().getRule();
	}
	
	//Providers: 'providers' '{'
	//        providers+=Provider (',' providers+=Provider)*
	//    '}'
	//;
	public ProvidersElements getProvidersAccess() {
		return pProviders;
	}
	
	public ParserRule getProvidersRule() {
		return getProvidersAccess().getRule();
	}
	
	//Provider:
	//    name=ID
	//;
	public ProviderElements getProviderAccess() {
		return pProvider;
	}
	
	public ParserRule getProviderRule() {
		return getProviderAccess().getRule();
	}
	
	//Property:
	//    name=ID ':' type=(TypeRef|SimpleType)
	//;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//TypeRef:
	//    ref=[DefinedType|ID]
	//;
	public TypeRefElements getTypeRefAccess() {
		return pTypeRef;
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}
	
	//DefinedType:
	//    'type' name=ID '{'
	//        values+=ContextValue (',' values+=ContextValue)*
	//    '}'
	//;
	public DefinedTypeElements getDefinedTypeAccess() {
		return pDefinedType;
	}
	
	public ParserRule getDefinedTypeRule() {
		return getDefinedTypeAccess().getRule();
	}
	
	//ContextValue:
	//    name=(STRING | ID)
	//;
	public ContextValueElements getContextValueAccess() {
		return pContextValue;
	}
	
	public ParserRule getContextValueRule() {
		return getContextValueAccess().getRule();
	}
	
	//SimpleType:
	//    StringType | IntegerType | BooleanType | DoubleType
	//;
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}
	
	//StringType:
	//    {StringType} "string"
	//;
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//IntegerType:
	//    {IntegerType} "integer"
	//;
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//BooleanType:
	//    {BooleanType} "boolean"
	//;
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//DoubleType:
	//    {DoubleType} "double"
	//;
	public DoubleTypeElements getDoubleTypeAccess() {
		return pDoubleType;
	}
	
	public ParserRule getDoubleTypeRule() {
		return getDoubleTypeAccess().getRule();
	}
	
	//Situation:
	//    'situation' name=ID '{'
	//        expression+=ContextExpression
	//    '}'
	//;
	public SituationElements getSituationAccess() {
		return pSituation;
	}
	
	public ParserRule getSituationRule() {
		return getSituationAccess().getRule();
	}
	
	//ContextExpression:
	//    ref=[Property|FQN] ('<' | '>' | '>=' | '<=' | '==' | '!=') value=ContextValue (('and' | 'or') expr=ContextExpression)?
	//;
	public ContextExpressionElements getContextExpressionAccess() {
		return pContextExpression;
	}
	
	public ParserRule getContextExpressionRule() {
		return getContextExpressionAccess().getRule();
	}
	
	//FQN hidden(): ID('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
