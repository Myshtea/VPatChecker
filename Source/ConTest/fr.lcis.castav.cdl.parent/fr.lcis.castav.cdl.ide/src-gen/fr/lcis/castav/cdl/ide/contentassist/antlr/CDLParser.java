/*
 * generated by Xtext 2.29.0
 */
package fr.lcis.castav.cdl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.lcis.castav.cdl.ide.contentassist.antlr.internal.InternalCDLParser;
import fr.lcis.castav.cdl.services.CDLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CDLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CDLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CDLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPropertyAccess().getTypeAlternatives_2_0(), "rule__Property__TypeAlternatives_2_0");
			builder.put(grammarAccess.getContextValueAccess().getNameAlternatives_0(), "rule__ContextValue__NameAlternatives_0");
			builder.put(grammarAccess.getSimpleTypeAccess().getAlternatives(), "rule__SimpleType__Alternatives");
			builder.put(grammarAccess.getContextExpressionAccess().getAlternatives_1(), "rule__ContextExpression__Alternatives_1");
			builder.put(grammarAccess.getContextExpressionAccess().getAlternatives_3_0(), "rule__ContextExpression__Alternatives_3_0");
			builder.put(grammarAccess.getContextModelAccess().getGroup_0(), "rule__ContextModel__Group_0__0");
			builder.put(grammarAccess.getContextModelAccess().getGroup_3(), "rule__ContextModel__Group_3__0");
			builder.put(grammarAccess.getContextAccess().getGroup(), "rule__Context__Group__0");
			builder.put(grammarAccess.getContextAccess().getGroup_3(), "rule__Context__Group_3__0");
			builder.put(grammarAccess.getContextAccess().getGroup_3_2(), "rule__Context__Group_3_2__0");
			builder.put(grammarAccess.getContextAccess().getGroup_5(), "rule__Context__Group_5__0");
			builder.put(grammarAccess.getContextAccess().getGroup_5_4(), "rule__Context__Group_5_4__0");
			builder.put(grammarAccess.getContextAccess().getGroup_10(), "rule__Context__Group_10__0");
			builder.put(grammarAccess.getContextAccess().getGroup_12(), "rule__Context__Group_12__0");
			builder.put(grammarAccess.getContextAccess().getGroup_12_5(), "rule__Context__Group_12_5__0");
			builder.put(grammarAccess.getContextMappingAccess().getGroup(), "rule__ContextMapping__Group__0");
			builder.put(grammarAccess.getProvidersAccess().getGroup(), "rule__Providers__Group__0");
			builder.put(grammarAccess.getProvidersAccess().getGroup_3(), "rule__Providers__Group_3__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getDefinedTypeAccess().getGroup(), "rule__DefinedType__Group__0");
			builder.put(grammarAccess.getDefinedTypeAccess().getGroup_4(), "rule__DefinedType__Group_4__0");
			builder.put(grammarAccess.getStringTypeAccess().getGroup(), "rule__StringType__Group__0");
			builder.put(grammarAccess.getIntegerTypeAccess().getGroup(), "rule__IntegerType__Group__0");
			builder.put(grammarAccess.getBooleanTypeAccess().getGroup(), "rule__BooleanType__Group__0");
			builder.put(grammarAccess.getDoubleTypeAccess().getGroup(), "rule__DoubleType__Group__0");
			builder.put(grammarAccess.getSituationAccess().getGroup(), "rule__Situation__Group__0");
			builder.put(grammarAccess.getContextExpressionAccess().getGroup(), "rule__ContextExpression__Group__0");
			builder.put(grammarAccess.getContextExpressionAccess().getGroup_3(), "rule__ContextExpression__Group_3__0");
			builder.put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
			builder.put(grammarAccess.getContextModelAccess().getNameAssignment_0_1(), "rule__ContextModel__NameAssignment_0_1");
			builder.put(grammarAccess.getContextModelAccess().getContextsAssignment_0_3(), "rule__ContextModel__ContextsAssignment_0_3");
			builder.put(grammarAccess.getContextModelAccess().getProvidersAssignment_1(), "rule__ContextModel__ProvidersAssignment_1");
			builder.put(grammarAccess.getContextModelAccess().getSituationsAssignment_2(), "rule__ContextModel__SituationsAssignment_2");
			builder.put(grammarAccess.getContextModelAccess().getTypesAssignment_3_0(), "rule__ContextModel__TypesAssignment_3_0");
			builder.put(grammarAccess.getContextAccess().getStaticAssignment_0(), "rule__Context__StaticAssignment_0");
			builder.put(grammarAccess.getContextAccess().getNameAssignment_2(), "rule__Context__NameAssignment_2");
			builder.put(grammarAccess.getContextAccess().getDerivedAssignment_3_0(), "rule__Context__DerivedAssignment_3_0");
			builder.put(grammarAccess.getContextAccess().getDerivesAssignment_3_1(), "rule__Context__DerivesAssignment_3_1");
			builder.put(grammarAccess.getContextAccess().getDerivesAssignment_3_2_1(), "rule__Context__DerivesAssignment_3_2_1");
			builder.put(grammarAccess.getContextAccess().getProvidersAssignment_5_3(), "rule__Context__ProvidersAssignment_5_3");
			builder.put(grammarAccess.getContextAccess().getProvidersAssignment_5_4_1(), "rule__Context__ProvidersAssignment_5_4_1");
			builder.put(grammarAccess.getContextAccess().getPropertiesAssignment_9(), "rule__Context__PropertiesAssignment_9");
			builder.put(grammarAccess.getContextAccess().getPropertiesAssignment_10_1(), "rule__Context__PropertiesAssignment_10_1");
			builder.put(grammarAccess.getContextAccess().getMappingsAssignment_12_4(), "rule__Context__MappingsAssignment_12_4");
			builder.put(grammarAccess.getContextAccess().getMappingsAssignment_12_5_1(), "rule__Context__MappingsAssignment_12_5_1");
			builder.put(grammarAccess.getContextMappingAccess().getRefAssignment_0(), "rule__ContextMapping__RefAssignment_0");
			builder.put(grammarAccess.getContextMappingAccess().getExpressionAssignment_2(), "rule__ContextMapping__ExpressionAssignment_2");
			builder.put(grammarAccess.getProvidersAccess().getProvidersAssignment_2(), "rule__Providers__ProvidersAssignment_2");
			builder.put(grammarAccess.getProvidersAccess().getProvidersAssignment_3_1(), "rule__Providers__ProvidersAssignment_3_1");
			builder.put(grammarAccess.getProviderAccess().getNameAssignment(), "rule__Provider__NameAssignment");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_0(), "rule__Property__NameAssignment_0");
			builder.put(grammarAccess.getPropertyAccess().getTypeAssignment_2(), "rule__Property__TypeAssignment_2");
			builder.put(grammarAccess.getTypeRefAccess().getRefAssignment(), "rule__TypeRef__RefAssignment");
			builder.put(grammarAccess.getDefinedTypeAccess().getNameAssignment_1(), "rule__DefinedType__NameAssignment_1");
			builder.put(grammarAccess.getDefinedTypeAccess().getValuesAssignment_3(), "rule__DefinedType__ValuesAssignment_3");
			builder.put(grammarAccess.getDefinedTypeAccess().getValuesAssignment_4_1(), "rule__DefinedType__ValuesAssignment_4_1");
			builder.put(grammarAccess.getContextValueAccess().getNameAssignment(), "rule__ContextValue__NameAssignment");
			builder.put(grammarAccess.getSituationAccess().getNameAssignment_1(), "rule__Situation__NameAssignment_1");
			builder.put(grammarAccess.getSituationAccess().getExpressionAssignment_3(), "rule__Situation__ExpressionAssignment_3");
			builder.put(grammarAccess.getContextExpressionAccess().getRefAssignment_0(), "rule__ContextExpression__RefAssignment_0");
			builder.put(grammarAccess.getContextExpressionAccess().getValueAssignment_2(), "rule__ContextExpression__ValueAssignment_2");
			builder.put(grammarAccess.getContextExpressionAccess().getExprAssignment_3_1(), "rule__ContextExpression__ExprAssignment_3_1");
			builder.put(grammarAccess.getContextModelAccess().getUnorderedGroup(), "rule__ContextModel__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CDLGrammarAccess grammarAccess;

	@Override
	protected InternalCDLParser createParser() {
		InternalCDLParser result = new InternalCDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
